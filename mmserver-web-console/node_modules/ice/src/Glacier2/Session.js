// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    var __M = require("../Ice/ModuleRegistry").Ice.__M;
    var Glacier2 = require("../Glacier2/SSLInfo").Glacier2;
    var Ice = __M.require(module, 
    [
        "../Ice/Object",
        "../Ice/ObjectPrx",
        "../Ice/Operation",
        "../Ice/Exception",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers",
        "../Ice/BuiltinSequences",
        "../Ice/Identity"
    ]).Ice;
    
    var Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */

    /**
     * This exception is raised if an attempt to create a new session failed.
     * 
     **/
    Glacier2.CannotCreateSessionException = Slice.defineUserException(
        function(reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "Glacier2::CannotCreateSessionException",
        function(__os)
        {
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.reason = __is.readString();
        },
        true,
        false);

    /**
     * A client-visible session object, which is tied to the lifecycle of
     * a {@link Router}.
     * 
     * @see Router
     * @see SessionManager
     * 
     **/
    Glacier2.Session = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::Glacier2::Session",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    Glacier2.SessionPrx = Slice.defineProxy(Ice.ObjectPrx, Glacier2.Session.ice_staticId, undefined);

    Slice.defineOperations(Glacier2.Session, Glacier2.SessionPrx,
    {
        "destroy": [, , , , , , , , , , ]
    });

    /**
     * An object for managing the set of identity constraints for specific
     * parts of object identity on a
     * {@link Session}.
     * 
     * @see Session
     * @see SessionControl
     * 
     **/
    Glacier2.StringSet = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::Glacier2::StringSet",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    Glacier2.StringSetPrx = Slice.defineProxy(Ice.ObjectPrx, Glacier2.StringSet.ice_staticId, undefined);

    Slice.defineOperations(Glacier2.StringSet, Glacier2.StringSetPrx,
    {
        "add": [, 2, 2, , , , [["Ice.StringSeqHelper"]], , , , ],
        "remove": [, 2, 2, , , , [["Ice.StringSeqHelper"]], , , , ],
        "get": [, 2, 2, , , ["Ice.StringSeqHelper"], , , , , ]
    });

    /**
     * An object for managing the set of object identity constraints on a
     * {@link Session}.
     * 
     * @see Session
     * @see SessionControl
     * 
     **/
    Glacier2.IdentitySet = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::Glacier2::IdentitySet",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    Glacier2.IdentitySetPrx = Slice.defineProxy(Ice.ObjectPrx, Glacier2.IdentitySet.ice_staticId, undefined);

    Slice.defineOperations(Glacier2.IdentitySet, Glacier2.IdentitySetPrx,
    {
        "add": [, 2, 2, , , , [["Ice.IdentitySeqHelper"]], , , , ],
        "remove": [, 2, 2, , , , [["Ice.IdentitySeqHelper"]], , , , ],
        "get": [, 2, 2, , , ["Ice.IdentitySeqHelper"], , , , , ]
    });

    /**
     * An administrative session control object, which is tied to the
     * lifecycle of a {@link Session}.
     * 
     * @see Session
     * 
     **/
    Glacier2.SessionControl = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::Glacier2::SessionControl",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    Glacier2.SessionControlPrx = Slice.defineProxy(Ice.ObjectPrx, Glacier2.SessionControl.ice_staticId, undefined);

    Slice.defineOperations(Glacier2.SessionControl, Glacier2.SessionControlPrx,
    {
        "categories": [, , , , , ["Glacier2.StringSetPrx"], , , , , ],
        "adapterIds": [, , , , , ["Glacier2.StringSetPrx"], , , , , ],
        "identities": [, , , , , ["Glacier2.IdentitySetPrx"], , , , , ],
        "getSessionTimeout": [, 2, 2, , , [3], , , , , ],
        "destroy": [, , , , , , , , , , ]
    });

    /**
     * The session manager for username/password authenticated users that
     * is responsible for managing {@link Session} objects. New session objects
     * are created by the {@link Router} object calling on an application-provided
     * session manager. If no session manager is provided by the application,
     * no client-visible sessions are passed to the client.
     * 
     * @see Router
     * @see Session
     * 
     **/
    Glacier2.SessionManager = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::Glacier2::SessionManager",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    Glacier2.SessionManagerPrx = Slice.defineProxy(Ice.ObjectPrx, Glacier2.SessionManager.ice_staticId, undefined);

    Slice.defineOperations(Glacier2.SessionManager, Glacier2.SessionManagerPrx,
    {
        "create": [, , , , 2, ["Glacier2.SessionPrx"], [[7], ["Glacier2.SessionControlPrx"]], , 
        [
            Glacier2.CannotCreateSessionException
        ], , ]
    });

    /**
     * The session manager for SSL authenticated users that is
     * responsible for managing {@link Session} objects. New session objects are
     * created by the {@link Router} object calling on an application-provided
     * session manager. If no session manager is provided by the
     * application, no client-visible sessions are passed to the client.
     * 
     * @see Router
     * @see Session
     * 
     **/
    Glacier2.SSLSessionManager = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 0,
        [
            "::Glacier2::SSLSessionManager",
            "::Ice::Object"
        ],
        -1, undefined, undefined, false);

    Glacier2.SSLSessionManagerPrx = Slice.defineProxy(Ice.ObjectPrx, Glacier2.SSLSessionManager.ice_staticId, undefined);

    Slice.defineOperations(Glacier2.SSLSessionManager, Glacier2.SSLSessionManagerPrx,
    {
        "create": [, , , , 2, ["Glacier2.SessionPrx"], [[Glacier2.SSLInfo], ["Glacier2.SessionControlPrx"]], , 
        [
            Glacier2.CannotCreateSessionException
        ], , ]
    });
/* slice2js browser-bundle-skip */
    exports.Glacier2 = Glacier2;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
