// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `SSHServerService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maomao.server.manager.idl;

/**
 * Provides type-specific helper functions.
 **/
public final class SSHServerServicePrxHelper extends Ice.ObjectPrxHelperBase implements SSHServerServicePrx
{
    private static final String __addServer_name = "addServer";

    public String addServer(String serverJson)
    {
        return addServer(serverJson, null, false);
    }

    public String addServer(String serverJson, java.util.Map<String, String> __ctx)
    {
        return addServer(serverJson, __ctx, true);
    }

    private String addServer(String serverJson, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__addServer_name);
        return end_addServer(begin_addServer(serverJson, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_addServer(String serverJson)
    {
        return begin_addServer(serverJson, null, false, false, null);
    }

    public Ice.AsyncResult begin_addServer(String serverJson, java.util.Map<String, String> __ctx)
    {
        return begin_addServer(serverJson, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_addServer(String serverJson, Ice.Callback __cb)
    {
        return begin_addServer(serverJson, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addServer(String serverJson, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addServer(serverJson, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addServer(String serverJson, Callback_SSHServerService_addServer __cb)
    {
        return begin_addServer(serverJson, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addServer(String serverJson, java.util.Map<String, String> __ctx, Callback_SSHServerService_addServer __cb)
    {
        return begin_addServer(serverJson, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addServer(String serverJson, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addServer(serverJson, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addServer(String serverJson, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addServer(serverJson, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_addServer(String serverJson, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addServer(serverJson, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addServer(String serverJson, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addServer(serverJson, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_addServer(String serverJson, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addServer(serverJson, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           SSHServerServicePrxHelper.__addServer_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_addServer(String serverJson, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addServer_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__addServer_name, __cb);
        try
        {
            __result.prepare(__addServer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(serverJson);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_addServer(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __addServer_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __addServer_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.SSHServerServicePrx __proxy = (com.maomao.server.manager.idl.SSHServerServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_addServer(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __loadServers_name = "loadServers";

    public String loadServers()
    {
        return loadServers(null, false);
    }

    public String loadServers(java.util.Map<String, String> __ctx)
    {
        return loadServers(__ctx, true);
    }

    private String loadServers(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__loadServers_name);
        return end_loadServers(begin_loadServers(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_loadServers()
    {
        return begin_loadServers(null, false, false, null);
    }

    public Ice.AsyncResult begin_loadServers(java.util.Map<String, String> __ctx)
    {
        return begin_loadServers(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_loadServers(Ice.Callback __cb)
    {
        return begin_loadServers(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_loadServers(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_loadServers(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_loadServers(Callback_SSHServerService_loadServers __cb)
    {
        return begin_loadServers(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_loadServers(java.util.Map<String, String> __ctx, Callback_SSHServerService_loadServers __cb)
    {
        return begin_loadServers(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_loadServers(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_loadServers(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_loadServers(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_loadServers(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_loadServers(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_loadServers(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_loadServers(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_loadServers(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_loadServers(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_loadServers(__ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             SSHServerServicePrxHelper.__loadServers_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_loadServers(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__loadServers_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__loadServers_name, __cb);
        try
        {
            __result.prepare(__loadServers_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_loadServers(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __loadServers_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __loadServers_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.SSHServerServicePrx __proxy = (com.maomao.server.manager.idl.SSHServerServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_loadServers(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __removeServer_name = "removeServer";

    public String removeServer(String key)
    {
        return removeServer(key, null, false);
    }

    public String removeServer(String key, java.util.Map<String, String> __ctx)
    {
        return removeServer(key, __ctx, true);
    }

    private String removeServer(String key, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__removeServer_name);
        return end_removeServer(begin_removeServer(key, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_removeServer(String key)
    {
        return begin_removeServer(key, null, false, false, null);
    }

    public Ice.AsyncResult begin_removeServer(String key, java.util.Map<String, String> __ctx)
    {
        return begin_removeServer(key, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_removeServer(String key, Ice.Callback __cb)
    {
        return begin_removeServer(key, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_removeServer(String key, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeServer(key, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_removeServer(String key, Callback_SSHServerService_removeServer __cb)
    {
        return begin_removeServer(key, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_removeServer(String key, java.util.Map<String, String> __ctx, Callback_SSHServerService_removeServer __cb)
    {
        return begin_removeServer(key, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_removeServer(String key, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_removeServer(key, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_removeServer(String key, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeServer(key, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_removeServer(String key, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_removeServer(key, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_removeServer(String key, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeServer(key, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_removeServer(String key, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeServer(key, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              SSHServerServicePrxHelper.__removeServer_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_removeServer(String key, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeServer_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__removeServer_name, __cb);
        try
        {
            __result.prepare(__removeServer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(key);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_removeServer(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __removeServer_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __removeServer_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.SSHServerServicePrx __proxy = (com.maomao.server.manager.idl.SSHServerServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_removeServer(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __updateServer_name = "updateServer";

    public String updateServer(String key, String serverJson)
    {
        return updateServer(key, serverJson, null, false);
    }

    public String updateServer(String key, String serverJson, java.util.Map<String, String> __ctx)
    {
        return updateServer(key, serverJson, __ctx, true);
    }

    private String updateServer(String key, String serverJson, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__updateServer_name);
        return end_updateServer(begin_updateServer(key, serverJson, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_updateServer(String key, String serverJson)
    {
        return begin_updateServer(key, serverJson, null, false, false, null);
    }

    public Ice.AsyncResult begin_updateServer(String key, String serverJson, java.util.Map<String, String> __ctx)
    {
        return begin_updateServer(key, serverJson, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_updateServer(String key, String serverJson, Ice.Callback __cb)
    {
        return begin_updateServer(key, serverJson, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateServer(String key, String serverJson, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateServer(key, serverJson, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateServer(String key, String serverJson, Callback_SSHServerService_updateServer __cb)
    {
        return begin_updateServer(key, serverJson, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateServer(String key, String serverJson, java.util.Map<String, String> __ctx, Callback_SSHServerService_updateServer __cb)
    {
        return begin_updateServer(key, serverJson, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateServer(String key, 
                                              String serverJson, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateServer(key, serverJson, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateServer(String key, 
                                              String serverJson, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateServer(key, serverJson, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_updateServer(String key, 
                                              String serverJson, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateServer(key, serverJson, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateServer(String key, 
                                              String serverJson, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateServer(key, serverJson, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_updateServer(String key, 
                                               String serverJson, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateServer(key, serverJson, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              SSHServerServicePrxHelper.__updateServer_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_updateServer(String key, 
                                               String serverJson, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateServer_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__updateServer_name, __cb);
        try
        {
            __result.prepare(__updateServer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(key);
            __os.writeString(serverJson);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_updateServer(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __updateServer_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __updateServer_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.SSHServerServicePrx __proxy = (com.maomao.server.manager.idl.SSHServerServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_updateServer(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static SSHServerServicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), SSHServerServicePrx.class, SSHServerServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static SSHServerServicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), SSHServerServicePrx.class, SSHServerServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static SSHServerServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), SSHServerServicePrx.class, SSHServerServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static SSHServerServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), SSHServerServicePrx.class, SSHServerServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static SSHServerServicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, SSHServerServicePrx.class, SSHServerServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static SSHServerServicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, SSHServerServicePrx.class, SSHServerServicePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::idl::SSHServerService"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, SSHServerServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static SSHServerServicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            SSHServerServicePrxHelper result = new SSHServerServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
