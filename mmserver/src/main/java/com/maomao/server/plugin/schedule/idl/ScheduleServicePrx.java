// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `ScheduleService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maomao.server.plugin.schedule.idl;

public interface ScheduleServicePrx extends Ice.ObjectPrx
{
    /**
     * add a schedule to schedule center
     **/
    public String registSchedule(String connectionUrl, String serviceName, String cronExpress);

    /**
     * add a schedule to schedule center
     * @param __ctx The Context map to send with the invocation.
     **/
    public String registSchedule(String connectionUrl, String serviceName, String cronExpress, java.util.Map<String, String> __ctx);

    /**
     * add a schedule to schedule center
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registSchedule(String connectionUrl, String serviceName, String cronExpress);

    /**
     * add a schedule to schedule center
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registSchedule(String connectionUrl, String serviceName, String cronExpress, java.util.Map<String, String> __ctx);

    /**
     * add a schedule to schedule center
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registSchedule(String connectionUrl, String serviceName, String cronExpress, Ice.Callback __cb);

    /**
     * add a schedule to schedule center
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registSchedule(String connectionUrl, String serviceName, String cronExpress, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * add a schedule to schedule center
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registSchedule(String connectionUrl, String serviceName, String cronExpress, Callback_ScheduleService_registSchedule __cb);

    /**
     * add a schedule to schedule center
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registSchedule(String connectionUrl, String serviceName, String cronExpress, java.util.Map<String, String> __ctx, Callback_ScheduleService_registSchedule __cb);

    /**
     * add a schedule to schedule center
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registSchedule(String connectionUrl, 
                                                String serviceName, 
                                                String cronExpress, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * add a schedule to schedule center
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registSchedule(String connectionUrl, 
                                                String serviceName, 
                                                String cronExpress, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb);

    /**
     * add a schedule to schedule center
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registSchedule(String connectionUrl, 
                                                String serviceName, 
                                                String cronExpress, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * add a schedule to schedule center
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_registSchedule(String connectionUrl, 
                                                String serviceName, 
                                                String cronExpress, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb);

    /**
     * add a schedule to schedule center
     * @param __result The asynchronous result object.
     **/
    public String end_registSchedule(Ice.AsyncResult __result);

    /**
     * execute schedule
     **/
    public String executeSchedule(String serviceName);

    /**
     * execute schedule
     * @param __ctx The Context map to send with the invocation.
     **/
    public String executeSchedule(String serviceName, java.util.Map<String, String> __ctx);

    /**
     * execute schedule
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_executeSchedule(String serviceName);

    /**
     * execute schedule
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_executeSchedule(String serviceName, java.util.Map<String, String> __ctx);

    /**
     * execute schedule
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_executeSchedule(String serviceName, Ice.Callback __cb);

    /**
     * execute schedule
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_executeSchedule(String serviceName, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * execute schedule
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_executeSchedule(String serviceName, Callback_ScheduleService_executeSchedule __cb);

    /**
     * execute schedule
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_executeSchedule(String serviceName, java.util.Map<String, String> __ctx, Callback_ScheduleService_executeSchedule __cb);

    /**
     * execute schedule
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_executeSchedule(String serviceName, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * execute schedule
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_executeSchedule(String serviceName, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb);

    /**
     * execute schedule
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_executeSchedule(String serviceName, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb);

    /**
     * execute schedule
     * @param __ctx The Context map to send with the invocation.
     * @param __responseCb The lambda response callback.
     * @param __exceptionCb The lambda exception callback.
     * @param __sentCb The lambda sent callback.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_executeSchedule(String serviceName, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb);

    /**
     * execute schedule
     * @param __result The asynchronous result object.
     **/
    public String end_executeSchedule(Ice.AsyncResult __result);
}
