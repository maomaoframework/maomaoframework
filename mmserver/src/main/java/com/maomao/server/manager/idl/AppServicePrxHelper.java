// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `AppService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maomao.server.manager.idl;

/**
 * Provides type-specific helper functions.
 **/
public final class AppServicePrxHelper extends Ice.ObjectPrxHelperBase implements AppServicePrx
{
    private static final String __appStartupNotify_name = "appStartupNotify";

    public String appStartupNotify(String appId, String ip, int port)
    {
        return appStartupNotify(appId, ip, port, null, false);
    }

    public String appStartupNotify(String appId, String ip, int port, java.util.Map<String, String> __ctx)
    {
        return appStartupNotify(appId, ip, port, __ctx, true);
    }

    private String appStartupNotify(String appId, String ip, int port, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__appStartupNotify_name);
        return end_appStartupNotify(begin_appStartupNotify(appId, ip, port, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_appStartupNotify(String appId, String ip, int port)
    {
        return begin_appStartupNotify(appId, ip, port, null, false, false, null);
    }

    public Ice.AsyncResult begin_appStartupNotify(String appId, String ip, int port, java.util.Map<String, String> __ctx)
    {
        return begin_appStartupNotify(appId, ip, port, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_appStartupNotify(String appId, String ip, int port, Ice.Callback __cb)
    {
        return begin_appStartupNotify(appId, ip, port, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_appStartupNotify(String appId, String ip, int port, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_appStartupNotify(appId, ip, port, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_appStartupNotify(String appId, String ip, int port, Callback_AppService_appStartupNotify __cb)
    {
        return begin_appStartupNotify(appId, ip, port, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_appStartupNotify(String appId, String ip, int port, java.util.Map<String, String> __ctx, Callback_AppService_appStartupNotify __cb)
    {
        return begin_appStartupNotify(appId, ip, port, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_appStartupNotify(String appId, 
                                                  String ip, 
                                                  int port, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_appStartupNotify(appId, ip, port, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_appStartupNotify(String appId, 
                                                  String ip, 
                                                  int port, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_appStartupNotify(appId, ip, port, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_appStartupNotify(String appId, 
                                                  String ip, 
                                                  int port, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_appStartupNotify(appId, ip, port, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_appStartupNotify(String appId, 
                                                  String ip, 
                                                  int port, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_appStartupNotify(appId, ip, port, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_appStartupNotify(String appId, 
                                                   String ip, 
                                                   int port, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_appStartupNotify(appId, ip, port, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  AppServicePrxHelper.__appStartupNotify_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_appStartupNotify(String appId, 
                                                   String ip, 
                                                   int port, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__appStartupNotify_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__appStartupNotify_name, __cb);
        try
        {
            __result.prepare(__appStartupNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __os.writeString(ip);
            __os.writeInt(port);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_appStartupNotify(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __appStartupNotify_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __appStartupNotify_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_appStartupNotify(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __appStopNotify_name = "appStopNotify";

    public String appStopNotify(String appId, String ip, int port)
    {
        return appStopNotify(appId, ip, port, null, false);
    }

    public String appStopNotify(String appId, String ip, int port, java.util.Map<String, String> __ctx)
    {
        return appStopNotify(appId, ip, port, __ctx, true);
    }

    private String appStopNotify(String appId, String ip, int port, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__appStopNotify_name);
        return end_appStopNotify(begin_appStopNotify(appId, ip, port, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_appStopNotify(String appId, String ip, int port)
    {
        return begin_appStopNotify(appId, ip, port, null, false, false, null);
    }

    public Ice.AsyncResult begin_appStopNotify(String appId, String ip, int port, java.util.Map<String, String> __ctx)
    {
        return begin_appStopNotify(appId, ip, port, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_appStopNotify(String appId, String ip, int port, Ice.Callback __cb)
    {
        return begin_appStopNotify(appId, ip, port, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_appStopNotify(String appId, String ip, int port, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_appStopNotify(appId, ip, port, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_appStopNotify(String appId, String ip, int port, Callback_AppService_appStopNotify __cb)
    {
        return begin_appStopNotify(appId, ip, port, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_appStopNotify(String appId, String ip, int port, java.util.Map<String, String> __ctx, Callback_AppService_appStopNotify __cb)
    {
        return begin_appStopNotify(appId, ip, port, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_appStopNotify(String appId, 
                                               String ip, 
                                               int port, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_appStopNotify(appId, ip, port, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_appStopNotify(String appId, 
                                               String ip, 
                                               int port, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_appStopNotify(appId, ip, port, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_appStopNotify(String appId, 
                                               String ip, 
                                               int port, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_appStopNotify(appId, ip, port, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_appStopNotify(String appId, 
                                               String ip, 
                                               int port, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_appStopNotify(appId, ip, port, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_appStopNotify(String appId, 
                                                String ip, 
                                                int port, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_appStopNotify(appId, ip, port, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               AppServicePrxHelper.__appStopNotify_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_appStopNotify(String appId, 
                                                String ip, 
                                                int port, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__appStopNotify_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__appStopNotify_name, __cb);
        try
        {
            __result.prepare(__appStopNotify_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __os.writeString(ip);
            __os.writeInt(port);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_appStopNotify(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __appStopNotify_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __appStopNotify_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_appStopNotify(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __appSyncStatus_name = "appSyncStatus";

    public String appSyncStatus(String jsonInfo, String ip, int port)
    {
        return appSyncStatus(jsonInfo, ip, port, null, false);
    }

    public String appSyncStatus(String jsonInfo, String ip, int port, java.util.Map<String, String> __ctx)
    {
        return appSyncStatus(jsonInfo, ip, port, __ctx, true);
    }

    private String appSyncStatus(String jsonInfo, String ip, int port, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__appSyncStatus_name);
        return end_appSyncStatus(begin_appSyncStatus(jsonInfo, ip, port, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_appSyncStatus(String jsonInfo, String ip, int port)
    {
        return begin_appSyncStatus(jsonInfo, ip, port, null, false, false, null);
    }

    public Ice.AsyncResult begin_appSyncStatus(String jsonInfo, String ip, int port, java.util.Map<String, String> __ctx)
    {
        return begin_appSyncStatus(jsonInfo, ip, port, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_appSyncStatus(String jsonInfo, String ip, int port, Ice.Callback __cb)
    {
        return begin_appSyncStatus(jsonInfo, ip, port, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_appSyncStatus(String jsonInfo, String ip, int port, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_appSyncStatus(jsonInfo, ip, port, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_appSyncStatus(String jsonInfo, String ip, int port, Callback_AppService_appSyncStatus __cb)
    {
        return begin_appSyncStatus(jsonInfo, ip, port, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_appSyncStatus(String jsonInfo, String ip, int port, java.util.Map<String, String> __ctx, Callback_AppService_appSyncStatus __cb)
    {
        return begin_appSyncStatus(jsonInfo, ip, port, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_appSyncStatus(String jsonInfo, 
                                               String ip, 
                                               int port, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_appSyncStatus(jsonInfo, ip, port, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_appSyncStatus(String jsonInfo, 
                                               String ip, 
                                               int port, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_appSyncStatus(jsonInfo, ip, port, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_appSyncStatus(String jsonInfo, 
                                               String ip, 
                                               int port, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_appSyncStatus(jsonInfo, ip, port, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_appSyncStatus(String jsonInfo, 
                                               String ip, 
                                               int port, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_appSyncStatus(jsonInfo, ip, port, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_appSyncStatus(String jsonInfo, 
                                                String ip, 
                                                int port, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_appSyncStatus(jsonInfo, ip, port, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               AppServicePrxHelper.__appSyncStatus_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_appSyncStatus(String jsonInfo, 
                                                String ip, 
                                                int port, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__appSyncStatus_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__appSyncStatus_name, __cb);
        try
        {
            __result.prepare(__appSyncStatus_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(jsonInfo);
            __os.writeString(ip);
            __os.writeInt(port);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_appSyncStatus(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __appSyncStatus_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __appSyncStatus_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_appSyncStatus(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __createApp_name = "createApp";

    public String createApp(String appId)
    {
        return createApp(appId, null, false);
    }

    public String createApp(String appId, java.util.Map<String, String> __ctx)
    {
        return createApp(appId, __ctx, true);
    }

    private String createApp(String appId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__createApp_name);
        return end_createApp(begin_createApp(appId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_createApp(String appId)
    {
        return begin_createApp(appId, null, false, false, null);
    }

    public Ice.AsyncResult begin_createApp(String appId, java.util.Map<String, String> __ctx)
    {
        return begin_createApp(appId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_createApp(String appId, Ice.Callback __cb)
    {
        return begin_createApp(appId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createApp(String appId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createApp(appId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createApp(String appId, Callback_AppService_createApp __cb)
    {
        return begin_createApp(appId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createApp(String appId, java.util.Map<String, String> __ctx, Callback_AppService_createApp __cb)
    {
        return begin_createApp(appId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createApp(String appId, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createApp(appId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createApp(String appId, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createApp(appId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_createApp(String appId, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createApp(appId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createApp(String appId, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createApp(appId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_createApp(String appId, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createApp(appId, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           AppServicePrxHelper.__createApp_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_createApp(String appId, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createApp_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__createApp_name, __cb);
        try
        {
            __result.prepare(__createApp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_createApp(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __createApp_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __createApp_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_createApp(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __createAppInstance_name = "createAppInstance";

    public String createAppInstance(String appId, String appInstanceJson)
    {
        return createAppInstance(appId, appInstanceJson, null, false);
    }

    public String createAppInstance(String appId, String appInstanceJson, java.util.Map<String, String> __ctx)
    {
        return createAppInstance(appId, appInstanceJson, __ctx, true);
    }

    private String createAppInstance(String appId, String appInstanceJson, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__createAppInstance_name);
        return end_createAppInstance(begin_createAppInstance(appId, appInstanceJson, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_createAppInstance(String appId, String appInstanceJson)
    {
        return begin_createAppInstance(appId, appInstanceJson, null, false, false, null);
    }

    public Ice.AsyncResult begin_createAppInstance(String appId, String appInstanceJson, java.util.Map<String, String> __ctx)
    {
        return begin_createAppInstance(appId, appInstanceJson, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_createAppInstance(String appId, String appInstanceJson, Ice.Callback __cb)
    {
        return begin_createAppInstance(appId, appInstanceJson, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createAppInstance(String appId, String appInstanceJson, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createAppInstance(appId, appInstanceJson, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createAppInstance(String appId, String appInstanceJson, Callback_AppService_createAppInstance __cb)
    {
        return begin_createAppInstance(appId, appInstanceJson, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createAppInstance(String appId, String appInstanceJson, java.util.Map<String, String> __ctx, Callback_AppService_createAppInstance __cb)
    {
        return begin_createAppInstance(appId, appInstanceJson, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createAppInstance(String appId, 
                                                   String appInstanceJson, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createAppInstance(appId, appInstanceJson, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createAppInstance(String appId, 
                                                   String appInstanceJson, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createAppInstance(appId, appInstanceJson, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_createAppInstance(String appId, 
                                                   String appInstanceJson, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createAppInstance(appId, appInstanceJson, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createAppInstance(String appId, 
                                                   String appInstanceJson, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createAppInstance(appId, appInstanceJson, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_createAppInstance(String appId, 
                                                    String appInstanceJson, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createAppInstance(appId, appInstanceJson, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   AppServicePrxHelper.__createAppInstance_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_createAppInstance(String appId, 
                                                    String appInstanceJson, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createAppInstance_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__createAppInstance_name, __cb);
        try
        {
            __result.prepare(__createAppInstance_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __os.writeString(appInstanceJson);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_createAppInstance(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __createAppInstance_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __createAppInstance_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_createAppInstance(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __forceAppInstanceRestart_name = "forceAppInstanceRestart";

    public void forceAppInstanceRestart(int seconds)
    {
        forceAppInstanceRestart(seconds, null, false);
    }

    public void forceAppInstanceRestart(int seconds, java.util.Map<String, String> __ctx)
    {
        forceAppInstanceRestart(seconds, __ctx, true);
    }

    private void forceAppInstanceRestart(int seconds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_forceAppInstanceRestart(begin_forceAppInstanceRestart(seconds, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_forceAppInstanceRestart(int seconds)
    {
        return begin_forceAppInstanceRestart(seconds, null, false, false, null);
    }

    public Ice.AsyncResult begin_forceAppInstanceRestart(int seconds, java.util.Map<String, String> __ctx)
    {
        return begin_forceAppInstanceRestart(seconds, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_forceAppInstanceRestart(int seconds, Ice.Callback __cb)
    {
        return begin_forceAppInstanceRestart(seconds, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_forceAppInstanceRestart(int seconds, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_forceAppInstanceRestart(seconds, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_forceAppInstanceRestart(int seconds, Callback_AppService_forceAppInstanceRestart __cb)
    {
        return begin_forceAppInstanceRestart(seconds, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_forceAppInstanceRestart(int seconds, java.util.Map<String, String> __ctx, Callback_AppService_forceAppInstanceRestart __cb)
    {
        return begin_forceAppInstanceRestart(seconds, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_forceAppInstanceRestart(int seconds, 
                                                         IceInternal.Functional_VoidCallback __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_forceAppInstanceRestart(seconds, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_forceAppInstanceRestart(int seconds, 
                                                         IceInternal.Functional_VoidCallback __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_forceAppInstanceRestart(seconds, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_forceAppInstanceRestart(int seconds, 
                                                         java.util.Map<String, String> __ctx, 
                                                         IceInternal.Functional_VoidCallback __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_forceAppInstanceRestart(seconds, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_forceAppInstanceRestart(int seconds, 
                                                         java.util.Map<String, String> __ctx, 
                                                         IceInternal.Functional_VoidCallback __responseCb, 
                                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_forceAppInstanceRestart(seconds, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_forceAppInstanceRestart(int seconds, 
                                                          java.util.Map<String, String> __ctx, 
                                                          boolean __explicitCtx, 
                                                          boolean __synchronous, 
                                                          IceInternal.Functional_VoidCallback __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_forceAppInstanceRestart(seconds, 
                                             __ctx, 
                                             __explicitCtx, 
                                             __synchronous, 
                                             new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_forceAppInstanceRestart(int seconds, 
                                                          java.util.Map<String, String> __ctx, 
                                                          boolean __explicitCtx, 
                                                          boolean __synchronous, 
                                                          IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__forceAppInstanceRestart_name, __cb);
        try
        {
            __result.prepare(__forceAppInstanceRestart_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(seconds);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_forceAppInstanceRestart(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __forceAppInstanceRestart_name);
    }

    private static final String __forceAppInstanceShutdown_name = "forceAppInstanceShutdown";

    public void forceAppInstanceShutdown(int seconds)
    {
        forceAppInstanceShutdown(seconds, null, false);
    }

    public void forceAppInstanceShutdown(int seconds, java.util.Map<String, String> __ctx)
    {
        forceAppInstanceShutdown(seconds, __ctx, true);
    }

    private void forceAppInstanceShutdown(int seconds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_forceAppInstanceShutdown(begin_forceAppInstanceShutdown(seconds, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_forceAppInstanceShutdown(int seconds)
    {
        return begin_forceAppInstanceShutdown(seconds, null, false, false, null);
    }

    public Ice.AsyncResult begin_forceAppInstanceShutdown(int seconds, java.util.Map<String, String> __ctx)
    {
        return begin_forceAppInstanceShutdown(seconds, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_forceAppInstanceShutdown(int seconds, Ice.Callback __cb)
    {
        return begin_forceAppInstanceShutdown(seconds, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_forceAppInstanceShutdown(int seconds, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_forceAppInstanceShutdown(seconds, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_forceAppInstanceShutdown(int seconds, Callback_AppService_forceAppInstanceShutdown __cb)
    {
        return begin_forceAppInstanceShutdown(seconds, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_forceAppInstanceShutdown(int seconds, java.util.Map<String, String> __ctx, Callback_AppService_forceAppInstanceShutdown __cb)
    {
        return begin_forceAppInstanceShutdown(seconds, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_forceAppInstanceShutdown(int seconds, 
                                                          IceInternal.Functional_VoidCallback __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_forceAppInstanceShutdown(seconds, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_forceAppInstanceShutdown(int seconds, 
                                                          IceInternal.Functional_VoidCallback __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_forceAppInstanceShutdown(seconds, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_forceAppInstanceShutdown(int seconds, 
                                                          java.util.Map<String, String> __ctx, 
                                                          IceInternal.Functional_VoidCallback __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_forceAppInstanceShutdown(seconds, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_forceAppInstanceShutdown(int seconds, 
                                                          java.util.Map<String, String> __ctx, 
                                                          IceInternal.Functional_VoidCallback __responseCb, 
                                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_forceAppInstanceShutdown(seconds, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_forceAppInstanceShutdown(int seconds, 
                                                           java.util.Map<String, String> __ctx, 
                                                           boolean __explicitCtx, 
                                                           boolean __synchronous, 
                                                           IceInternal.Functional_VoidCallback __responseCb, 
                                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_forceAppInstanceShutdown(seconds, 
                                              __ctx, 
                                              __explicitCtx, 
                                              __synchronous, 
                                              new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_forceAppInstanceShutdown(int seconds, 
                                                           java.util.Map<String, String> __ctx, 
                                                           boolean __explicitCtx, 
                                                           boolean __synchronous, 
                                                           IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__forceAppInstanceShutdown_name, __cb);
        try
        {
            __result.prepare(__forceAppInstanceShutdown_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(seconds);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_forceAppInstanceShutdown(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __forceAppInstanceShutdown_name);
    }

    private static final String __getServerInfo_name = "getServerInfo";

    public String getServerInfo()
    {
        return getServerInfo(null, false);
    }

    public String getServerInfo(java.util.Map<String, String> __ctx)
    {
        return getServerInfo(__ctx, true);
    }

    private String getServerInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getServerInfo_name);
        return end_getServerInfo(begin_getServerInfo(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getServerInfo()
    {
        return begin_getServerInfo(null, false, false, null);
    }

    public Ice.AsyncResult begin_getServerInfo(java.util.Map<String, String> __ctx)
    {
        return begin_getServerInfo(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getServerInfo(Ice.Callback __cb)
    {
        return begin_getServerInfo(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getServerInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getServerInfo(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getServerInfo(Callback_AppService_getServerInfo __cb)
    {
        return begin_getServerInfo(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getServerInfo(java.util.Map<String, String> __ctx, Callback_AppService_getServerInfo __cb)
    {
        return begin_getServerInfo(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getServerInfo(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getServerInfo(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getServerInfo(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getServerInfo(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getServerInfo(java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getServerInfo(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getServerInfo(java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getServerInfo(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getServerInfo(java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getServerInfo(__ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               AppServicePrxHelper.__getServerInfo_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_getServerInfo(java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getServerInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getServerInfo_name, __cb);
        try
        {
            __result.prepare(__getServerInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_getServerInfo(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getServerInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getServerInfo_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_getServerInfo(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __loadApps_name = "loadApps";

    public java.util.List<App> loadApps()
    {
        return loadApps(null, false);
    }

    public java.util.List<App> loadApps(java.util.Map<String, String> __ctx)
    {
        return loadApps(__ctx, true);
    }

    private java.util.List<App> loadApps(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__loadApps_name);
        return end_loadApps(begin_loadApps(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_loadApps()
    {
        return begin_loadApps(null, false, false, null);
    }

    public Ice.AsyncResult begin_loadApps(java.util.Map<String, String> __ctx)
    {
        return begin_loadApps(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_loadApps(Ice.Callback __cb)
    {
        return begin_loadApps(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_loadApps(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_loadApps(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_loadApps(Callback_AppService_loadApps __cb)
    {
        return begin_loadApps(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_loadApps(java.util.Map<String, String> __ctx, Callback_AppService_loadApps __cb)
    {
        return begin_loadApps(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_loadApps(IceInternal.Functional_GenericCallback1<java.util.List<App>> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_loadApps(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_loadApps(IceInternal.Functional_GenericCallback1<java.util.List<App>> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_loadApps(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_loadApps(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<java.util.List<App>> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_loadApps(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_loadApps(java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<java.util.List<App>> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_loadApps(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_loadApps(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_GenericCallback1<java.util.List<App>> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_loadApps(__ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackArg1<java.util.List<com.maomao.server.manager.idl.App>>(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          AppServicePrxHelper.__loadApps_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_loadApps(java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__loadApps_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__loadApps_name, __cb);
        try
        {
            __result.prepare(__loadApps_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public java.util.List<App> end_loadApps(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __loadApps_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            java.util.List<App> __ret;
            __ret = ListAppsHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __loadApps_completed(Ice.TwowayCallbackArg1<java.util.List<App>> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        java.util.List<App> __ret = null;
        try
        {
            __ret = __proxy.end_loadApps(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __removeApp_name = "removeApp";

    public String removeApp(String appId)
    {
        return removeApp(appId, null, false);
    }

    public String removeApp(String appId, java.util.Map<String, String> __ctx)
    {
        return removeApp(appId, __ctx, true);
    }

    private String removeApp(String appId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__removeApp_name);
        return end_removeApp(begin_removeApp(appId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_removeApp(String appId)
    {
        return begin_removeApp(appId, null, false, false, null);
    }

    public Ice.AsyncResult begin_removeApp(String appId, java.util.Map<String, String> __ctx)
    {
        return begin_removeApp(appId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_removeApp(String appId, Ice.Callback __cb)
    {
        return begin_removeApp(appId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_removeApp(String appId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeApp(appId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_removeApp(String appId, Callback_AppService_removeApp __cb)
    {
        return begin_removeApp(appId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_removeApp(String appId, java.util.Map<String, String> __ctx, Callback_AppService_removeApp __cb)
    {
        return begin_removeApp(appId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_removeApp(String appId, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_removeApp(appId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_removeApp(String appId, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeApp(appId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_removeApp(String appId, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_removeApp(appId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_removeApp(String appId, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeApp(appId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_removeApp(String appId, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeApp(appId, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           AppServicePrxHelper.__removeApp_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_removeApp(String appId, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeApp_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__removeApp_name, __cb);
        try
        {
            __result.prepare(__removeApp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_removeApp(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __removeApp_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __removeApp_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_removeApp(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __removeAppInstance_name = "removeAppInstance";

    public String removeAppInstance(String appId, String instanceId)
    {
        return removeAppInstance(appId, instanceId, null, false);
    }

    public String removeAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx)
    {
        return removeAppInstance(appId, instanceId, __ctx, true);
    }

    private String removeAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__removeAppInstance_name);
        return end_removeAppInstance(begin_removeAppInstance(appId, instanceId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_removeAppInstance(String appId, String instanceId)
    {
        return begin_removeAppInstance(appId, instanceId, null, false, false, null);
    }

    public Ice.AsyncResult begin_removeAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx)
    {
        return begin_removeAppInstance(appId, instanceId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_removeAppInstance(String appId, String instanceId, Ice.Callback __cb)
    {
        return begin_removeAppInstance(appId, instanceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_removeAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeAppInstance(appId, instanceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_removeAppInstance(String appId, String instanceId, Callback_AppService_removeAppInstance __cb)
    {
        return begin_removeAppInstance(appId, instanceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_removeAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx, Callback_AppService_removeAppInstance __cb)
    {
        return begin_removeAppInstance(appId, instanceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_removeAppInstance(String appId, 
                                                   String instanceId, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_removeAppInstance(appId, instanceId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_removeAppInstance(String appId, 
                                                   String instanceId, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeAppInstance(appId, instanceId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_removeAppInstance(String appId, 
                                                   String instanceId, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_removeAppInstance(appId, instanceId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_removeAppInstance(String appId, 
                                                   String instanceId, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeAppInstance(appId, instanceId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_removeAppInstance(String appId, 
                                                    String instanceId, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_removeAppInstance(appId, instanceId, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   AppServicePrxHelper.__removeAppInstance_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_removeAppInstance(String appId, 
                                                    String instanceId, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__removeAppInstance_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__removeAppInstance_name, __cb);
        try
        {
            __result.prepare(__removeAppInstance_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __os.writeString(instanceId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_removeAppInstance(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __removeAppInstance_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __removeAppInstance_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_removeAppInstance(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __restartApp_name = "restartApp";

    public String restartApp(String appId)
    {
        return restartApp(appId, null, false);
    }

    public String restartApp(String appId, java.util.Map<String, String> __ctx)
    {
        return restartApp(appId, __ctx, true);
    }

    private String restartApp(String appId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__restartApp_name);
        return end_restartApp(begin_restartApp(appId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_restartApp(String appId)
    {
        return begin_restartApp(appId, null, false, false, null);
    }

    public Ice.AsyncResult begin_restartApp(String appId, java.util.Map<String, String> __ctx)
    {
        return begin_restartApp(appId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_restartApp(String appId, Ice.Callback __cb)
    {
        return begin_restartApp(appId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_restartApp(String appId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_restartApp(appId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_restartApp(String appId, Callback_AppService_restartApp __cb)
    {
        return begin_restartApp(appId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_restartApp(String appId, java.util.Map<String, String> __ctx, Callback_AppService_restartApp __cb)
    {
        return begin_restartApp(appId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_restartApp(String appId, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_restartApp(appId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_restartApp(String appId, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_restartApp(appId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_restartApp(String appId, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_restartApp(appId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_restartApp(String appId, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_restartApp(appId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_restartApp(String appId, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_restartApp(appId, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            AppServicePrxHelper.__restartApp_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_restartApp(String appId, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__restartApp_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__restartApp_name, __cb);
        try
        {
            __result.prepare(__restartApp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_restartApp(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __restartApp_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __restartApp_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_restartApp(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __restartAppInstance_name = "restartAppInstance";

    public String restartAppInstance(String appId, String instanceId)
    {
        return restartAppInstance(appId, instanceId, null, false);
    }

    public String restartAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx)
    {
        return restartAppInstance(appId, instanceId, __ctx, true);
    }

    private String restartAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__restartAppInstance_name);
        return end_restartAppInstance(begin_restartAppInstance(appId, instanceId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_restartAppInstance(String appId, String instanceId)
    {
        return begin_restartAppInstance(appId, instanceId, null, false, false, null);
    }

    public Ice.AsyncResult begin_restartAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx)
    {
        return begin_restartAppInstance(appId, instanceId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_restartAppInstance(String appId, String instanceId, Ice.Callback __cb)
    {
        return begin_restartAppInstance(appId, instanceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_restartAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_restartAppInstance(appId, instanceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_restartAppInstance(String appId, String instanceId, Callback_AppService_restartAppInstance __cb)
    {
        return begin_restartAppInstance(appId, instanceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_restartAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx, Callback_AppService_restartAppInstance __cb)
    {
        return begin_restartAppInstance(appId, instanceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_restartAppInstance(String appId, 
                                                    String instanceId, 
                                                    IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_restartAppInstance(appId, instanceId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_restartAppInstance(String appId, 
                                                    String instanceId, 
                                                    IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_restartAppInstance(appId, instanceId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_restartAppInstance(String appId, 
                                                    String instanceId, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_restartAppInstance(appId, instanceId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_restartAppInstance(String appId, 
                                                    String instanceId, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_restartAppInstance(appId, instanceId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_restartAppInstance(String appId, 
                                                     String instanceId, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_restartAppInstance(appId, instanceId, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    AppServicePrxHelper.__restartAppInstance_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_restartAppInstance(String appId, 
                                                     String instanceId, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__restartAppInstance_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__restartAppInstance_name, __cb);
        try
        {
            __result.prepare(__restartAppInstance_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __os.writeString(instanceId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_restartAppInstance(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __restartAppInstance_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __restartAppInstance_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_restartAppInstance(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __startApp_name = "startApp";

    public String startApp(String appId)
    {
        return startApp(appId, null, false);
    }

    public String startApp(String appId, java.util.Map<String, String> __ctx)
    {
        return startApp(appId, __ctx, true);
    }

    private String startApp(String appId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__startApp_name);
        return end_startApp(begin_startApp(appId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_startApp(String appId)
    {
        return begin_startApp(appId, null, false, false, null);
    }

    public Ice.AsyncResult begin_startApp(String appId, java.util.Map<String, String> __ctx)
    {
        return begin_startApp(appId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_startApp(String appId, Ice.Callback __cb)
    {
        return begin_startApp(appId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_startApp(String appId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startApp(appId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_startApp(String appId, Callback_AppService_startApp __cb)
    {
        return begin_startApp(appId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_startApp(String appId, java.util.Map<String, String> __ctx, Callback_AppService_startApp __cb)
    {
        return begin_startApp(appId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_startApp(String appId, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_startApp(appId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_startApp(String appId, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startApp(appId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_startApp(String appId, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_startApp(appId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_startApp(String appId, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startApp(appId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_startApp(String appId, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startApp(appId, __ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          AppServicePrxHelper.__startApp_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_startApp(String appId, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startApp_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__startApp_name, __cb);
        try
        {
            __result.prepare(__startApp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_startApp(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __startApp_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __startApp_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_startApp(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __startAppInstance_name = "startAppInstance";

    public String startAppInstance(String appId, String instanceId)
    {
        return startAppInstance(appId, instanceId, null, false);
    }

    public String startAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx)
    {
        return startAppInstance(appId, instanceId, __ctx, true);
    }

    private String startAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__startAppInstance_name);
        return end_startAppInstance(begin_startAppInstance(appId, instanceId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_startAppInstance(String appId, String instanceId)
    {
        return begin_startAppInstance(appId, instanceId, null, false, false, null);
    }

    public Ice.AsyncResult begin_startAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx)
    {
        return begin_startAppInstance(appId, instanceId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_startAppInstance(String appId, String instanceId, Ice.Callback __cb)
    {
        return begin_startAppInstance(appId, instanceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_startAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startAppInstance(appId, instanceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_startAppInstance(String appId, String instanceId, Callback_AppService_startAppInstance __cb)
    {
        return begin_startAppInstance(appId, instanceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_startAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx, Callback_AppService_startAppInstance __cb)
    {
        return begin_startAppInstance(appId, instanceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_startAppInstance(String appId, 
                                                  String instanceId, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_startAppInstance(appId, instanceId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_startAppInstance(String appId, 
                                                  String instanceId, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startAppInstance(appId, instanceId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_startAppInstance(String appId, 
                                                  String instanceId, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_startAppInstance(appId, instanceId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_startAppInstance(String appId, 
                                                  String instanceId, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startAppInstance(appId, instanceId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_startAppInstance(String appId, 
                                                   String instanceId, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_startAppInstance(appId, instanceId, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  AppServicePrxHelper.__startAppInstance_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_startAppInstance(String appId, 
                                                   String instanceId, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startAppInstance_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__startAppInstance_name, __cb);
        try
        {
            __result.prepare(__startAppInstance_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __os.writeString(instanceId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_startAppInstance(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __startAppInstance_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __startAppInstance_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_startAppInstance(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __stopApp_name = "stopApp";

    public String stopApp(String appId)
    {
        return stopApp(appId, null, false);
    }

    public String stopApp(String appId, java.util.Map<String, String> __ctx)
    {
        return stopApp(appId, __ctx, true);
    }

    private String stopApp(String appId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__stopApp_name);
        return end_stopApp(begin_stopApp(appId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_stopApp(String appId)
    {
        return begin_stopApp(appId, null, false, false, null);
    }

    public Ice.AsyncResult begin_stopApp(String appId, java.util.Map<String, String> __ctx)
    {
        return begin_stopApp(appId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_stopApp(String appId, Ice.Callback __cb)
    {
        return begin_stopApp(appId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_stopApp(String appId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopApp(appId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_stopApp(String appId, Callback_AppService_stopApp __cb)
    {
        return begin_stopApp(appId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_stopApp(String appId, java.util.Map<String, String> __ctx, Callback_AppService_stopApp __cb)
    {
        return begin_stopApp(appId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_stopApp(String appId, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_stopApp(appId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_stopApp(String appId, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopApp(appId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_stopApp(String appId, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_stopApp(appId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_stopApp(String appId, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopApp(appId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_stopApp(String appId, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopApp(appId, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         AppServicePrxHelper.__stopApp_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_stopApp(String appId, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopApp_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__stopApp_name, __cb);
        try
        {
            __result.prepare(__stopApp_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_stopApp(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __stopApp_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __stopApp_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_stopApp(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __stopAppInstance_name = "stopAppInstance";

    public String stopAppInstance(String appId, String instanceId)
    {
        return stopAppInstance(appId, instanceId, null, false);
    }

    public String stopAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx)
    {
        return stopAppInstance(appId, instanceId, __ctx, true);
    }

    private String stopAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__stopAppInstance_name);
        return end_stopAppInstance(begin_stopAppInstance(appId, instanceId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_stopAppInstance(String appId, String instanceId)
    {
        return begin_stopAppInstance(appId, instanceId, null, false, false, null);
    }

    public Ice.AsyncResult begin_stopAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx)
    {
        return begin_stopAppInstance(appId, instanceId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_stopAppInstance(String appId, String instanceId, Ice.Callback __cb)
    {
        return begin_stopAppInstance(appId, instanceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_stopAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopAppInstance(appId, instanceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_stopAppInstance(String appId, String instanceId, Callback_AppService_stopAppInstance __cb)
    {
        return begin_stopAppInstance(appId, instanceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_stopAppInstance(String appId, String instanceId, java.util.Map<String, String> __ctx, Callback_AppService_stopAppInstance __cb)
    {
        return begin_stopAppInstance(appId, instanceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_stopAppInstance(String appId, 
                                                 String instanceId, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_stopAppInstance(appId, instanceId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_stopAppInstance(String appId, 
                                                 String instanceId, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopAppInstance(appId, instanceId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_stopAppInstance(String appId, 
                                                 String instanceId, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_stopAppInstance(appId, instanceId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_stopAppInstance(String appId, 
                                                 String instanceId, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopAppInstance(appId, instanceId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_stopAppInstance(String appId, 
                                                  String instanceId, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopAppInstance(appId, instanceId, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 AppServicePrxHelper.__stopAppInstance_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_stopAppInstance(String appId, 
                                                  String instanceId, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stopAppInstance_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__stopAppInstance_name, __cb);
        try
        {
            __result.prepare(__stopAppInstance_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __os.writeString(instanceId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_stopAppInstance(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __stopAppInstance_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __stopAppInstance_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_stopAppInstance(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __stopServer_name = "stopServer";

    public void stopServer()
    {
        stopServer(null, false);
    }

    public void stopServer(java.util.Map<String, String> __ctx)
    {
        stopServer(__ctx, true);
    }

    private void stopServer(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        end_stopServer(begin_stopServer(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_stopServer()
    {
        return begin_stopServer(null, false, false, null);
    }

    public Ice.AsyncResult begin_stopServer(java.util.Map<String, String> __ctx)
    {
        return begin_stopServer(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_stopServer(Ice.Callback __cb)
    {
        return begin_stopServer(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_stopServer(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopServer(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_stopServer(Callback_AppService_stopServer __cb)
    {
        return begin_stopServer(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_stopServer(java.util.Map<String, String> __ctx, Callback_AppService_stopServer __cb)
    {
        return begin_stopServer(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_stopServer(IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_stopServer(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_stopServer(IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopServer(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_stopServer(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_stopServer(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_stopServer(java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopServer(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_stopServer(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_VoidCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_stopServer(__ctx, 
                                __explicitCtx, 
                                __synchronous, 
                                new IceInternal.Functional_OnewayCallback(__responseCb, __exceptionCb, __sentCb));
    }

    private Ice.AsyncResult begin_stopServer(java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__stopServer_name, __cb);
        try
        {
            __result.prepare(__stopServer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_stopServer(Ice.AsyncResult __iresult)
    {
        __end(__iresult, __stopServer_name);
    }

    private static final String __syncServerInfo_name = "syncServerInfo";

    public String syncServerInfo()
    {
        return syncServerInfo(null, false);
    }

    public String syncServerInfo(java.util.Map<String, String> __ctx)
    {
        return syncServerInfo(__ctx, true);
    }

    private String syncServerInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__syncServerInfo_name);
        return end_syncServerInfo(begin_syncServerInfo(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_syncServerInfo()
    {
        return begin_syncServerInfo(null, false, false, null);
    }

    public Ice.AsyncResult begin_syncServerInfo(java.util.Map<String, String> __ctx)
    {
        return begin_syncServerInfo(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_syncServerInfo(Ice.Callback __cb)
    {
        return begin_syncServerInfo(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_syncServerInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_syncServerInfo(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_syncServerInfo(Callback_AppService_syncServerInfo __cb)
    {
        return begin_syncServerInfo(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_syncServerInfo(java.util.Map<String, String> __ctx, Callback_AppService_syncServerInfo __cb)
    {
        return begin_syncServerInfo(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_syncServerInfo(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_syncServerInfo(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_syncServerInfo(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_syncServerInfo(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_syncServerInfo(java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_syncServerInfo(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_syncServerInfo(java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_syncServerInfo(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_syncServerInfo(java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_syncServerInfo(__ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                AppServicePrxHelper.__syncServerInfo_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_syncServerInfo(java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__syncServerInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__syncServerInfo_name, __cb);
        try
        {
            __result.prepare(__syncServerInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_syncServerInfo(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __syncServerInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __syncServerInfo_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_syncServerInfo(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __updateAppInstance_name = "updateAppInstance";

    public String updateAppInstance(String appId, String instanceId, String appInstanceJson)
    {
        return updateAppInstance(appId, instanceId, appInstanceJson, null, false);
    }

    public String updateAppInstance(String appId, String instanceId, String appInstanceJson, java.util.Map<String, String> __ctx)
    {
        return updateAppInstance(appId, instanceId, appInstanceJson, __ctx, true);
    }

    private String updateAppInstance(String appId, String instanceId, String appInstanceJson, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__updateAppInstance_name);
        return end_updateAppInstance(begin_updateAppInstance(appId, instanceId, appInstanceJson, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_updateAppInstance(String appId, String instanceId, String appInstanceJson)
    {
        return begin_updateAppInstance(appId, instanceId, appInstanceJson, null, false, false, null);
    }

    public Ice.AsyncResult begin_updateAppInstance(String appId, String instanceId, String appInstanceJson, java.util.Map<String, String> __ctx)
    {
        return begin_updateAppInstance(appId, instanceId, appInstanceJson, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_updateAppInstance(String appId, String instanceId, String appInstanceJson, Ice.Callback __cb)
    {
        return begin_updateAppInstance(appId, instanceId, appInstanceJson, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateAppInstance(String appId, String instanceId, String appInstanceJson, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateAppInstance(appId, instanceId, appInstanceJson, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateAppInstance(String appId, String instanceId, String appInstanceJson, Callback_AppService_updateAppInstance __cb)
    {
        return begin_updateAppInstance(appId, instanceId, appInstanceJson, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateAppInstance(String appId, String instanceId, String appInstanceJson, java.util.Map<String, String> __ctx, Callback_AppService_updateAppInstance __cb)
    {
        return begin_updateAppInstance(appId, instanceId, appInstanceJson, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateAppInstance(String appId, 
                                                   String instanceId, 
                                                   String appInstanceJson, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateAppInstance(appId, instanceId, appInstanceJson, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateAppInstance(String appId, 
                                                   String instanceId, 
                                                   String appInstanceJson, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateAppInstance(appId, instanceId, appInstanceJson, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_updateAppInstance(String appId, 
                                                   String instanceId, 
                                                   String appInstanceJson, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateAppInstance(appId, instanceId, appInstanceJson, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateAppInstance(String appId, 
                                                   String instanceId, 
                                                   String appInstanceJson, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateAppInstance(appId, instanceId, appInstanceJson, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_updateAppInstance(String appId, 
                                                    String instanceId, 
                                                    String appInstanceJson, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateAppInstance(appId, instanceId, appInstanceJson, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   AppServicePrxHelper.__updateAppInstance_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_updateAppInstance(String appId, 
                                                    String instanceId, 
                                                    String appInstanceJson, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateAppInstance_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__updateAppInstance_name, __cb);
        try
        {
            __result.prepare(__updateAppInstance_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(appId);
            __os.writeString(instanceId);
            __os.writeString(appInstanceJson);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_updateAppInstance(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __updateAppInstance_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __updateAppInstance_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        com.maomao.server.manager.idl.AppServicePrx __proxy = (com.maomao.server.manager.idl.AppServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_updateAppInstance(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static AppServicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), AppServicePrx.class, AppServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static AppServicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), AppServicePrx.class, AppServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static AppServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), AppServicePrx.class, AppServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static AppServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), AppServicePrx.class, AppServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static AppServicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, AppServicePrx.class, AppServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static AppServicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, AppServicePrx.class, AppServicePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::idl::AppService"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, AppServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static AppServicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            AppServicePrxHelper result = new AppServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
