// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `AppService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.maomao.server.manager.idl;

/**
 * App服务
 **/
public abstract class _AppServiceDisp extends Ice.ObjectImpl implements AppService
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::idl::AppService"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * app启动完毕后，发送通知
     **/
    public final String appStartupNotify(String appId, String ip, int port)
    {
        return appStartupNotify(appId, ip, port, null);
    }

    /**
     * app停止时发送给hdp server的通知事件
     **/
    public final String appStopNotify(String appId, String ip, int port)
    {
        return appStopNotify(appId, ip, port, null);
    }

    /**
     * 　app与hdpserver保持同步状态
     **/
    public final String appSyncStatus(String jsonInfo, String ip, int port)
    {
        return appSyncStatus(jsonInfo, ip, port, null);
    }

    /**
     * Create a new app
     **/
    public final String createApp(String appId)
    {
        return createApp(appId, null);
    }

    /**
     * 创建一个新的App实例
     **/
    public final String createAppInstance(String appId, String appInstanceJson)
    {
        return createAppInstance(appId, appInstanceJson, null);
    }

    /**
     * 迫使服务器关闭
     **/
    public final void forceAppInstanceRestart(int seconds)
    {
        forceAppInstanceRestart(seconds, null);
    }

    /**
     * 迫使服务器关闭
     **/
    public final void forceAppInstanceShutdown(int seconds)
    {
        forceAppInstanceShutdown(seconds, null);
    }

    /**
     * 　返回服务器信息
     **/
    public final String getHdpServerInfo()
    {
        return getHdpServerInfo(null);
    }

    /**
     * 返回全部App
     **/
    public final java.util.List<App> loadApps()
    {
        return loadApps(null);
    }

    /**
     * 删除一个App
     **/
    public final String removeApp(String appId)
    {
        return removeApp(appId, null);
    }

    /**
     * 删除一个App实例
     **/
    public final String removeAppInstance(String appId, String instanceId)
    {
        return removeAppInstance(appId, instanceId, null);
    }

    /**
     * 重启一个应用的所有实例
     **/
    public final String restartApp(String appId)
    {
        return restartApp(appId, null);
    }

    /**
     * 停止一个App的某一个实例
     * instanceId 传递为空时，表示停止该App的全部实例
     **/
    public final String restartAppInstance(String appId, String instanceId)
    {
        return restartAppInstance(appId, instanceId, null);
    }

    /**
     * 启动App的所有实例
     **/
    public final String startApp(String appId)
    {
        return startApp(appId, null);
    }

    /**
     * 启动一个App实例
     * instanceId为空时,表示启动该App的全部实例
     **/
    public final String startAppInstance(String appId, String instanceId)
    {
        return startAppInstance(appId, instanceId, null);
    }

    /**
     * 停止一个App及其所有实例
     **/
    public final String stopApp(String appId)
    {
        return stopApp(appId, null);
    }

    /**
     * 停止一个App的某一个实例
     * instanceId 传递为空时，表示停止该App的全部实例
     **/
    public final String stopAppInstance(String appId, String instanceId)
    {
        return stopAppInstance(appId, instanceId, null);
    }

    public final void stopServer()
    {
        stopServer(null);
    }

    /**
     * 同步服务器信息
     **/
    public final String syncServerInfo()
    {
        return syncServerInfo(null);
    }

    /**
     * 更新一个现有的App实例
     **/
    public final String updateAppInstance(String appId, String instanceId, String appInstanceJson)
    {
        return updateAppInstance(appId, instanceId, appInstanceJson, null);
    }

    public static Ice.DispatchStatus ___stopServer(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.stopServer(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___loadApps(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        java.util.List<App> __ret = __obj.loadApps(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        ListAppsHelper.write(__os, __ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___stopAppInstance(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        String instanceId;
        appId = __is.readString();
        instanceId = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.stopAppInstance(appId, instanceId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___restartAppInstance(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        String instanceId;
        appId = __is.readString();
        instanceId = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.restartAppInstance(appId, instanceId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___startAppInstance(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        String instanceId;
        appId = __is.readString();
        instanceId = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.startAppInstance(appId, instanceId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___removeAppInstance(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        String instanceId;
        appId = __is.readString();
        instanceId = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.removeAppInstance(appId, instanceId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___createApp(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        appId = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.createApp(appId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___removeApp(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        appId = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.removeApp(appId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___stopApp(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        appId = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.stopApp(appId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___startApp(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        appId = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.startApp(appId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___restartApp(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        appId = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.restartApp(appId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___createAppInstance(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        String appInstanceJson;
        appId = __is.readString();
        appInstanceJson = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.createAppInstance(appId, appInstanceJson, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___updateAppInstance(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        String instanceId;
        String appInstanceJson;
        appId = __is.readString();
        instanceId = __is.readString();
        appInstanceJson = __is.readString();
        __inS.endReadParams();
        String __ret = __obj.updateAppInstance(appId, instanceId, appInstanceJson, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___syncServerInfo(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj.syncServerInfo(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getHdpServerInfo(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        String __ret = __obj.getHdpServerInfo(__current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___appSyncStatus(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String jsonInfo;
        String ip;
        int port;
        jsonInfo = __is.readString();
        ip = __is.readString();
        port = __is.readInt();
        __inS.endReadParams();
        String __ret = __obj.appSyncStatus(jsonInfo, ip, port, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___appStopNotify(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        String ip;
        int port;
        appId = __is.readString();
        ip = __is.readString();
        port = __is.readInt();
        __inS.endReadParams();
        String __ret = __obj.appStopNotify(appId, ip, port, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___appStartupNotify(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String appId;
        String ip;
        int port;
        appId = __is.readString();
        ip = __is.readString();
        port = __is.readInt();
        __inS.endReadParams();
        String __ret = __obj.appStartupNotify(appId, ip, port, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeString(__ret);
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___forceAppInstanceShutdown(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int seconds;
        seconds = __is.readInt();
        __inS.endReadParams();
        __obj.forceAppInstanceShutdown(seconds, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___forceAppInstanceRestart(AppService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        int seconds;
        seconds = __is.readInt();
        __inS.endReadParams();
        __obj.forceAppInstanceRestart(seconds, __current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "appStartupNotify",
        "appStopNotify",
        "appSyncStatus",
        "createApp",
        "createAppInstance",
        "forceAppInstanceRestart",
        "forceAppInstanceShutdown",
        "getHdpServerInfo",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "loadApps",
        "removeApp",
        "removeAppInstance",
        "restartApp",
        "restartAppInstance",
        "startApp",
        "startAppInstance",
        "stopApp",
        "stopAppInstance",
        "stopServer",
        "syncServerInfo",
        "updateAppInstance"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___appStartupNotify(this, in, __current);
            }
            case 1:
            {
                return ___appStopNotify(this, in, __current);
            }
            case 2:
            {
                return ___appSyncStatus(this, in, __current);
            }
            case 3:
            {
                return ___createApp(this, in, __current);
            }
            case 4:
            {
                return ___createAppInstance(this, in, __current);
            }
            case 5:
            {
                return ___forceAppInstanceRestart(this, in, __current);
            }
            case 6:
            {
                return ___forceAppInstanceShutdown(this, in, __current);
            }
            case 7:
            {
                return ___getHdpServerInfo(this, in, __current);
            }
            case 8:
            {
                return ___ice_id(this, in, __current);
            }
            case 9:
            {
                return ___ice_ids(this, in, __current);
            }
            case 10:
            {
                return ___ice_isA(this, in, __current);
            }
            case 11:
            {
                return ___ice_ping(this, in, __current);
            }
            case 12:
            {
                return ___loadApps(this, in, __current);
            }
            case 13:
            {
                return ___removeApp(this, in, __current);
            }
            case 14:
            {
                return ___removeAppInstance(this, in, __current);
            }
            case 15:
            {
                return ___restartApp(this, in, __current);
            }
            case 16:
            {
                return ___restartAppInstance(this, in, __current);
            }
            case 17:
            {
                return ___startApp(this, in, __current);
            }
            case 18:
            {
                return ___startAppInstance(this, in, __current);
            }
            case 19:
            {
                return ___stopApp(this, in, __current);
            }
            case 20:
            {
                return ___stopAppInstance(this, in, __current);
            }
            case 21:
            {
                return ___stopServer(this, in, __current);
            }
            case 22:
            {
                return ___syncServerInfo(this, in, __current);
            }
            case 23:
            {
                return ___updateAppInstance(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
