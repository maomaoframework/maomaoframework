// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Admin.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    var __M = require("../Ice/ModuleRegistry").Ice.__M;
    var Glacier2 = require("../Glacier2/Session").Glacier2;
    var Ice = __M.require(module, 
    [
        "../Ice/Object",
        "../Ice/ObjectPrx",
        "../Ice/Operation",
        "../Ice/Struct",
        "../Ice/EnumBase",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers",
        "../Ice/Identity",
        "../Ice/BuiltinSequences",
        "../Ice/Properties",
        "../Ice/SliceChecksumDict"
    ]).Ice;
    
    var IceGrid = __M.require(module, 
    [
        "../IceGrid/Exception",
        "../IceGrid/Descriptor"
    ]).IceGrid;
    
    var Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */

    /**
     * An enumeration representing the state of the server.
     * 
     **/
    IceGrid.ServerState = Slice.defineEnum([
        ['Inactive', 0], ['Activating', 1], ['ActivationTimedOut', 2], ['Active', 3], ['Deactivating', 4],
        ['Destroying', 5], ['Destroyed', 6]]);
    Slice.defineDictionary(IceGrid, "StringObjectProxyDict", "StringObjectProxyDictHelper", "Ice.StringHelper", "Ice.ObjectPrx", false, undefined, undefined);

    /**
     * Information about an Ice object.
     * 
     **/
    IceGrid.ObjectInfo = Slice.defineStruct(
        function(proxy, type)
        {
            this.proxy = proxy !== undefined ? proxy : null;
            this.type = type !== undefined ? type : "";
        },
        false,
        function(__os)
        {
            __os.writeProxy(this.proxy);
            __os.writeString(this.type);
        },
        function(__is)
        {
            this.proxy = __is.readProxy();
            this.type = __is.readString();
        },
        3, 
        false);
    Slice.defineSequence(IceGrid, "ObjectInfoSeqHelper", "IceGrid.ObjectInfo", false);

    /**
     * Information about an adapter registered with the IceGrid registry.
     * 
     **/
    IceGrid.AdapterInfo = Slice.defineStruct(
        function(id, proxy, replicaGroupId)
        {
            this.id = id !== undefined ? id : "";
            this.proxy = proxy !== undefined ? proxy : null;
            this.replicaGroupId = replicaGroupId !== undefined ? replicaGroupId : "";
        },
        false,
        function(__os)
        {
            __os.writeString(this.id);
            __os.writeProxy(this.proxy);
            __os.writeString(this.replicaGroupId);
        },
        function(__is)
        {
            this.id = __is.readString();
            this.proxy = __is.readProxy();
            this.replicaGroupId = __is.readString();
        },
        4, 
        false);
    Slice.defineSequence(IceGrid, "AdapterInfoSeqHelper", "IceGrid.AdapterInfo", false);

    /**
     * Information about a server managed by an IceGrid node.
     * 
     **/
    IceGrid.ServerInfo = Slice.defineStruct(
        function(application, uuid, revision, node, descriptor, sessionId)
        {
            this.application = application !== undefined ? application : "";
            this.uuid = uuid !== undefined ? uuid : "";
            this.revision = revision !== undefined ? revision : 0;
            this.node = node !== undefined ? node : "";
            this.descriptor = descriptor !== undefined ? descriptor : null;
            this.sessionId = sessionId !== undefined ? sessionId : "";
        },
        false,
        function(__os)
        {
            __os.writeString(this.application);
            __os.writeString(this.uuid);
            __os.writeInt(this.revision);
            __os.writeString(this.node);
            __os.writeObject(this.descriptor);
            __os.writeString(this.sessionId);
        },
        function(__is)
        {
            var self = this;
            this.application = __is.readString();
            this.uuid = __is.readString();
            this.revision = __is.readInt();
            this.node = __is.readString();
            __is.readObject(function(__o){ self.descriptor = __o; }, IceGrid.ServerDescriptor);
            this.sessionId = __is.readString();
        },
        9, 
        false);

    /**
     * Information about an IceGrid node.
     * 
     **/
    IceGrid.NodeInfo = Slice.defineStruct(
        function(name, os, hostname, release, version, machine, nProcessors, dataDir)
        {
            this.name = name !== undefined ? name : "";
            this.os = os !== undefined ? os : "";
            this.hostname = hostname !== undefined ? hostname : "";
            this.release = release !== undefined ? release : "";
            this.version = version !== undefined ? version : "";
            this.machine = machine !== undefined ? machine : "";
            this.nProcessors = nProcessors !== undefined ? nProcessors : 0;
            this.dataDir = dataDir !== undefined ? dataDir : "";
        },
        true,
        function(__os)
        {
            __os.writeString(this.name);
            __os.writeString(this.os);
            __os.writeString(this.hostname);
            __os.writeString(this.release);
            __os.writeString(this.version);
            __os.writeString(this.machine);
            __os.writeInt(this.nProcessors);
            __os.writeString(this.dataDir);
        },
        function(__is)
        {
            this.name = __is.readString();
            this.os = __is.readString();
            this.hostname = __is.readString();
            this.release = __is.readString();
            this.version = __is.readString();
            this.machine = __is.readString();
            this.nProcessors = __is.readInt();
            this.dataDir = __is.readString();
        },
        11, 
        false);

    /**
     * Information about an IceGrid registry replica.
     * 
     **/
    IceGrid.RegistryInfo = Slice.defineStruct(
        function(name, hostname)
        {
            this.name = name !== undefined ? name : "";
            this.hostname = hostname !== undefined ? hostname : "";
        },
        true,
        function(__os)
        {
            __os.writeString(this.name);
            __os.writeString(this.hostname);
        },
        function(__is)
        {
            this.name = __is.readString();
            this.hostname = __is.readString();
        },
        2, 
        false);
    Slice.defineSequence(IceGrid, "RegistryInfoSeqHelper", "IceGrid.RegistryInfo", false);

    /**
     * Information about the load of a node.
     * 
     **/
    IceGrid.LoadInfo = Slice.defineStruct(
        function(avg1, avg5, avg15)
        {
            this.avg1 = avg1 !== undefined ? avg1 : 0.0;
            this.avg5 = avg5 !== undefined ? avg5 : 0.0;
            this.avg15 = avg15 !== undefined ? avg15 : 0.0;
        },
        false,
        function(__os)
        {
            __os.writeFloat(this.avg1);
            __os.writeFloat(this.avg5);
            __os.writeFloat(this.avg15);
        },
        function(__is)
        {
            this.avg1 = __is.readFloat();
            this.avg5 = __is.readFloat();
            this.avg15 = __is.readFloat();
        },
        12, 
        true);

    /**
     * Information about an IceGrid application.
     * 
     **/
    IceGrid.ApplicationInfo = Slice.defineStruct(
        function(uuid, createTime, createUser, updateTime, updateUser, revision, descriptor)
        {
            this.uuid = uuid !== undefined ? uuid : "";
            this.createTime = createTime !== undefined ? createTime : 0;
            this.createUser = createUser !== undefined ? createUser : "";
            this.updateTime = updateTime !== undefined ? updateTime : 0;
            this.updateUser = updateUser !== undefined ? updateUser : "";
            this.revision = revision !== undefined ? revision : 0;
            this.descriptor = descriptor !== undefined ? descriptor : new IceGrid.ApplicationDescriptor();
        },
        false,
        function(__os)
        {
            __os.writeString(this.uuid);
            __os.writeLong(this.createTime);
            __os.writeString(this.createUser);
            __os.writeLong(this.updateTime);
            __os.writeString(this.updateUser);
            __os.writeInt(this.revision);
            IceGrid.ApplicationDescriptor.write(__os, this.descriptor);
        },
        function(__is)
        {
            this.uuid = __is.readString();
            this.createTime = __is.readLong();
            this.createUser = __is.readString();
            this.updateTime = __is.readLong();
            this.updateUser = __is.readString();
            this.revision = __is.readInt();
            this.descriptor = IceGrid.ApplicationDescriptor.read(__is, this.descriptor);
        },
        33, 
        false);
    Slice.defineSequence(IceGrid, "ApplicationInfoSeqHelper", "IceGrid.ApplicationInfo", false);

    /**
     * Information about updates to an IceGrid application.
     * 
     **/
    IceGrid.ApplicationUpdateInfo = Slice.defineStruct(
        function(updateTime, updateUser, revision, descriptor)
        {
            this.updateTime = updateTime !== undefined ? updateTime : 0;
            this.updateUser = updateUser !== undefined ? updateUser : "";
            this.revision = revision !== undefined ? revision : 0;
            this.descriptor = descriptor !== undefined ? descriptor : new IceGrid.ApplicationUpdateDescriptor();
        },
        false,
        function(__os)
        {
            __os.writeLong(this.updateTime);
            __os.writeString(this.updateUser);
            __os.writeInt(this.revision);
            IceGrid.ApplicationUpdateDescriptor.write(__os, this.descriptor);
        },
        function(__is)
        {
            this.updateTime = __is.readLong();
            this.updateUser = __is.readString();
            this.revision = __is.readInt();
            this.descriptor = IceGrid.ApplicationUpdateDescriptor.read(__is, this.descriptor);
        },
        28, 
        false);

    /**
     * The IceGrid administrative interface. </p>
     * <p class="Warning">Allowing access to this interface
     * is a security risk! Please see the IceGrid documentation
     * for further information.
     * 
     **/
    IceGrid.Admin = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::IceGrid::Admin"
        ],
        -1, undefined, undefined, false);

    IceGrid.AdminPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.Admin.ice_staticId, undefined);

    Slice.defineOperations(IceGrid.Admin, IceGrid.AdminPrx,
    {
        "addApplication": [, , , , , , [[IceGrid.ApplicationDescriptor]], , 
        [
            IceGrid.AccessDeniedException,
            IceGrid.DeploymentException
        ], true, ],
        "syncApplication": [, , , , , , [[IceGrid.ApplicationDescriptor]], , 
        [
            IceGrid.AccessDeniedException,
            IceGrid.ApplicationNotExistException,
            IceGrid.DeploymentException
        ], true, ],
        "updateApplication": [, , , , , , [[IceGrid.ApplicationUpdateDescriptor]], , 
        [
            IceGrid.AccessDeniedException,
            IceGrid.ApplicationNotExistException,
            IceGrid.DeploymentException
        ], true, ],
        "syncApplicationWithoutRestart": [, , , , , , [[IceGrid.ApplicationDescriptor]], , 
        [
            IceGrid.AccessDeniedException,
            IceGrid.ApplicationNotExistException,
            IceGrid.DeploymentException
        ], true, ],
        "updateApplicationWithoutRestart": [, , , , , , [[IceGrid.ApplicationUpdateDescriptor]], , 
        [
            IceGrid.AccessDeniedException,
            IceGrid.ApplicationNotExistException,
            IceGrid.DeploymentException
        ], true, ],
        "removeApplication": [, , , , , , [[7]], , 
        [
            IceGrid.AccessDeniedException,
            IceGrid.ApplicationNotExistException,
            IceGrid.DeploymentException
        ], , ],
        "instantiateServer": [, , , , , , [[7], [7], [IceGrid.ServerInstanceDescriptor]], , 
        [
            IceGrid.AccessDeniedException,
            IceGrid.ApplicationNotExistException,
            IceGrid.DeploymentException
        ], , ],
        "patchApplication": [, , , 1, , , [[7], [1]], , 
        [
            IceGrid.ApplicationNotExistException,
            IceGrid.PatchException
        ], , ],
        "getApplicationInfo": [, 2, 1, , , [IceGrid.ApplicationInfo], [[7]], , 
        [
            IceGrid.ApplicationNotExistException
        ], , true],
        "getDefaultApplicationDescriptor": [, 2, 1, , , [IceGrid.ApplicationDescriptor], , , 
        [
            IceGrid.DeploymentException
        ], , true],
        "getAllApplicationNames": [, 2, 1, , , ["Ice.StringSeqHelper"], , , , , ],
        "getServerInfo": [, 2, 1, , , [IceGrid.ServerInfo], [[7]], , 
        [
            IceGrid.ServerNotExistException
        ], , true],
        "getServerState": [, 2, 1, , , [IceGrid.ServerState.__helper], [[7]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.NodeUnreachableException,
            IceGrid.ServerNotExistException
        ], , ],
        "getServerPid": [, 2, 1, , , [3], [[7]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.NodeUnreachableException,
            IceGrid.ServerNotExistException
        ], , ],
        "getServerAdminCategory": [, 2, 2, , , [7], , , , , ],
        "getServerAdmin": [, 2, 2, , , [9], [[7]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.NodeUnreachableException,
            IceGrid.ServerNotExistException
        ], , ],
        "enableServer": [, 2, 2, , , , [[7], [1]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.NodeUnreachableException,
            IceGrid.ServerNotExistException
        ], , ],
        "isServerEnabled": [, 2, 1, , , [1], [[7]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.NodeUnreachableException,
            IceGrid.ServerNotExistException
        ], , ],
        "startServer": [, , , 1, , , [[7]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.NodeUnreachableException,
            IceGrid.ServerNotExistException,
            IceGrid.ServerStartException
        ], , ],
        "stopServer": [, , , 1, , , [[7]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.NodeUnreachableException,
            IceGrid.ServerNotExistException,
            IceGrid.ServerStopException
        ], , ],
        "patchServer": [, , , 1, , , [[7], [1]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.NodeUnreachableException,
            IceGrid.PatchException,
            IceGrid.ServerNotExistException
        ], , ],
        "sendSignal": [, , , , , , [[7], [7]], , 
        [
            IceGrid.BadSignalException,
            IceGrid.DeploymentException,
            IceGrid.NodeUnreachableException,
            IceGrid.ServerNotExistException
        ], , ],
        "getAllServerIds": [, 2, 1, , , ["Ice.StringSeqHelper"], , , , , ],
        "getAdapterInfo": [, 2, 1, , , ["IceGrid.AdapterInfoSeqHelper"], [[7]], , 
        [
            IceGrid.AdapterNotExistException
        ], , ],
        "removeAdapter": [, , , , , , [[7]], , 
        [
            IceGrid.AdapterNotExistException,
            IceGrid.DeploymentException
        ], , ],
        "getAllAdapterIds": [, 2, 1, , , ["Ice.StringSeqHelper"], , , , , ],
        "addObject": [, , , , , , [[9]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.ObjectExistsException
        ], , ],
        "updateObject": [, , , , , , [[9]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.ObjectNotRegisteredException
        ], , ],
        "addObjectWithType": [, , , , , , [[9], [7]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.ObjectExistsException
        ], , ],
        "removeObject": [, , , , , , [[Ice.Identity]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.ObjectNotRegisteredException
        ], , ],
        "getObjectInfo": [, 2, 1, , , [IceGrid.ObjectInfo], [[Ice.Identity]], , 
        [
            IceGrid.ObjectNotRegisteredException
        ], , ],
        "getObjectInfosByType": [, 2, 1, , , ["IceGrid.ObjectInfoSeqHelper"], [[7]], , , , ],
        "getAllObjectInfos": [, 2, 1, , , ["IceGrid.ObjectInfoSeqHelper"], [[7]], , , , ],
        "pingNode": [, 2, 1, , , [1], [[7]], , 
        [
            IceGrid.NodeNotExistException
        ], , ],
        "getNodeLoad": [, 2, 1, , , [IceGrid.LoadInfo], [[7]], , 
        [
            IceGrid.NodeNotExistException,
            IceGrid.NodeUnreachableException
        ], , ],
        "getNodeInfo": [, 2, 1, , , [IceGrid.NodeInfo], [[7]], , 
        [
            IceGrid.NodeNotExistException,
            IceGrid.NodeUnreachableException
        ], , ],
        "getNodeAdmin": [, 2, 2, , , [9], [[7]], , 
        [
            IceGrid.NodeNotExistException,
            IceGrid.NodeUnreachableException
        ], , ],
        "getNodeProcessorSocketCount": [, 2, 1, , , [3], [[7]], , 
        [
            IceGrid.NodeNotExistException,
            IceGrid.NodeUnreachableException
        ], , ],
        "shutdownNode": [, , , , , , [[7]], , 
        [
            IceGrid.NodeNotExistException,
            IceGrid.NodeUnreachableException
        ], , ],
        "getNodeHostname": [, 2, 1, , , [7], [[7]], , 
        [
            IceGrid.NodeNotExistException,
            IceGrid.NodeUnreachableException
        ], , ],
        "getAllNodeNames": [, 2, 1, , , ["Ice.StringSeqHelper"], , , , , ],
        "pingRegistry": [, 2, 2, , , [1], [[7]], , 
        [
            IceGrid.RegistryNotExistException
        ], , ],
        "getRegistryInfo": [, 2, 2, , , [IceGrid.RegistryInfo], [[7]], , 
        [
            IceGrid.RegistryNotExistException,
            IceGrid.RegistryUnreachableException
        ], , ],
        "getRegistryAdmin": [, 2, 2, , , [9], [[7]], , 
        [
            IceGrid.RegistryNotExistException
        ], , ],
        "shutdownRegistry": [, 2, 2, , , , [[7]], , 
        [
            IceGrid.RegistryNotExistException,
            IceGrid.RegistryUnreachableException
        ], , ],
        "getAllRegistryNames": [, 2, 2, , , ["Ice.StringSeqHelper"], , , , , ],
        "shutdown": [, , , , , , , , , , ],
        "getSliceChecksums": [, 2, 1, , , ["Ice.SliceChecksumDictHelper"], , , , , ]
    });

    /**
     * This interface provides access to IceGrid log file contents.
     * 
     **/
    IceGrid.FileIterator = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::IceGrid::FileIterator"
        ],
        -1, undefined, undefined, false);

    IceGrid.FileIteratorPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.FileIterator.ice_staticId, undefined);

    Slice.defineOperations(IceGrid.FileIterator, IceGrid.FileIteratorPrx,
    {
        "read": [, , , , , [1], [[3]], [["Ice.StringSeqHelper"]], 
        [
            IceGrid.FileNotAvailableException
        ], , ],
        "destroy": [, , , , , , , , , , ]
    });

    /**
     * Used by administrative clients to view,
     * update, and receive observer updates from the IceGrid
     * registry. Admin sessions are created either with the {@link Registry}
     * object or the registry admin {@link Glacier2.SessionManager} object.
     * 
     * @see Registry
     * @see Glacier2.SessionManager
     * 
     **/
    IceGrid.AdminSession = Slice.defineObject(
        undefined,
        Ice.Object,
        [
            Glacier2.Session
        ], 2,
        [
            "::Glacier2::Session",
            "::Ice::Object",
            "::IceGrid::AdminSession"
        ],
        -1, undefined, undefined, false);

    IceGrid.AdminSessionPrx = Slice.defineProxy(Ice.ObjectPrx, IceGrid.AdminSession.ice_staticId, [
        Glacier2.SessionPrx]);

    Slice.defineOperations(IceGrid.AdminSession, IceGrid.AdminSessionPrx,
    {
        "keepAlive": [, 2, 2, , , , , , , , ],
        "getAdmin": [, 2, 1, , , ["IceGrid.AdminPrx"], , , , , ],
        "getAdminCallbackTemplate": [, 2, 2, , , [9], , , , , ],
        "setObservers": [, 2, 2, , , , [["IceGrid.RegistryObserverPrx"], ["IceGrid.NodeObserverPrx"], ["IceGrid.ApplicationObserverPrx"], ["IceGrid.AdapterObserverPrx"], ["IceGrid.ObjectObserverPrx"]], , 
        [
            IceGrid.ObserverAlreadyRegisteredException
        ], , ],
        "setObserversByIdentity": [, 2, 2, , , , [[Ice.Identity], [Ice.Identity], [Ice.Identity], [Ice.Identity], [Ice.Identity]], , 
        [
            IceGrid.ObserverAlreadyRegisteredException
        ], , ],
        "startUpdate": [, , , , , [3], , , 
        [
            IceGrid.AccessDeniedException
        ], , ],
        "finishUpdate": [, , , , , , , , 
        [
            IceGrid.AccessDeniedException
        ], , ],
        "getReplicaName": [, 2, 2, , , [7], , , , , ],
        "openServerLog": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [7], [3]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.FileNotAvailableException,
            IceGrid.NodeUnreachableException,
            IceGrid.ServerNotExistException
        ], , ],
        "openServerStdErr": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [3]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.FileNotAvailableException,
            IceGrid.NodeUnreachableException,
            IceGrid.ServerNotExistException
        ], , ],
        "openServerStdOut": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [3]], , 
        [
            IceGrid.DeploymentException,
            IceGrid.FileNotAvailableException,
            IceGrid.NodeUnreachableException,
            IceGrid.ServerNotExistException
        ], , ],
        "openNodeStdErr": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [3]], , 
        [
            IceGrid.FileNotAvailableException,
            IceGrid.NodeNotExistException,
            IceGrid.NodeUnreachableException
        ], , ],
        "openNodeStdOut": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [3]], , 
        [
            IceGrid.FileNotAvailableException,
            IceGrid.NodeNotExistException,
            IceGrid.NodeUnreachableException
        ], , ],
        "openRegistryStdErr": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [3]], , 
        [
            IceGrid.FileNotAvailableException,
            IceGrid.RegistryNotExistException,
            IceGrid.RegistryUnreachableException
        ], , ],
        "openRegistryStdOut": [, , , , , ["IceGrid.FileIteratorPrx"], [[7], [3]], , 
        [
            IceGrid.FileNotAvailableException,
            IceGrid.RegistryNotExistException,
            IceGrid.RegistryUnreachableException
        ], , ]
    });
/* slice2js browser-bundle-skip */
    exports.IceGrid = IceGrid;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
