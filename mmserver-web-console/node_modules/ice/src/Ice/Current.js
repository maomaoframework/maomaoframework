// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Current.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    var __M = require("../Ice/ModuleRegistry").Ice.__M;
    var Ice = __M.require(module, 
    [
        "../Ice/Struct",
        "../Ice/EnumBase",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers",
        "../Ice/ObjectAdapterF",
        "../Ice/ConnectionF",
        "../Ice/Identity",
        "../Ice/Version"
    ]).Ice;
    
    var Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */
    Slice.defineDictionary(Ice, "Context", "ContextHelper", "Ice.StringHelper", "Ice.StringHelper", false, undefined, undefined);

    /**
     * The {@link OperationMode} determines the retry behavior an
     * invocation in case of a (potentially) recoverable error.
     * 
     **/
    Ice.OperationMode = Slice.defineEnum([
        ['Normal', 0], ['Nonmutating', 1], ['Idempotent', 2]]);

    /**
     * Information about the current method invocation for servers. Each
     * operation on the server has a <tt>Current</tt> as its implicit final
     * parameter. <tt>Current</tt> is mostly used for Ice services. Most
     * applications ignore this parameter.
     * 
     **/
    Ice.Current = Slice.defineStruct(
        function(adapter, con, id, facet, operation, mode, ctx, requestId, encoding)
        {
            this.adapter = adapter !== undefined ? adapter : null;
            this.con = con !== undefined ? con : null;
            this.id = id !== undefined ? id : new Ice.Identity();
            this.facet = facet !== undefined ? facet : "";
            this.operation = operation !== undefined ? operation : "";
            this.mode = mode !== undefined ? mode : Ice.OperationMode.Normal;
            this.ctx = ctx !== undefined ? ctx : null;
            this.requestId = requestId !== undefined ? requestId : 0;
            this.encoding = encoding !== undefined ? encoding : new Ice.EncodingVersion();
        },
        false);
/* slice2js browser-bundle-skip */
    exports.Ice = Ice;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
