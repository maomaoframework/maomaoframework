// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Exception.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    var __M = require("../Ice/ModuleRegistry").Ice.__M;
    var Ice = __M.require(module, 
    [
        "../Ice/Exception",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers",
        "../Ice/Identity",
        "../Ice/BuiltinSequences"
    ]).Ice;
    
    var Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */

    var IceGrid = __M.module("IceGrid");
/* slice2js browser-bundle-skip-end */

    /**
     * This exception is raised if an application does not exist.
     * 
     **/
    IceGrid.ApplicationNotExistException = Slice.defineUserException(
        function(name, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.name = name !== undefined ? name : "";
        },
        Ice.UserException,
        "IceGrid::ApplicationNotExistException",
        function(__os)
        {
            __os.writeString(this.name);
        },
        function(__is)
        {
            this.name = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if a server does not exist.
     * 
     **/
    IceGrid.ServerNotExistException = Slice.defineUserException(
        function(id, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.id = id !== undefined ? id : "";
        },
        Ice.UserException,
        "IceGrid::ServerNotExistException",
        function(__os)
        {
            __os.writeString(this.id);
        },
        function(__is)
        {
            this.id = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if a server failed to start.
     * 
     **/
    IceGrid.ServerStartException = Slice.defineUserException(
        function(id, reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.id = id !== undefined ? id : "";
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "IceGrid::ServerStartException",
        function(__os)
        {
            __os.writeString(this.id);
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.id = __is.readString();
            this.reason = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if a server failed to stop.
     * 
     **/
    IceGrid.ServerStopException = Slice.defineUserException(
        function(id, reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.id = id !== undefined ? id : "";
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "IceGrid::ServerStopException",
        function(__os)
        {
            __os.writeString(this.id);
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.id = __is.readString();
            this.reason = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if an adapter does not exist.
     * 
     **/
    IceGrid.AdapterNotExistException = Slice.defineUserException(
        function(id, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.id = id !== undefined ? id : "";
        },
        Ice.UserException,
        "IceGrid::AdapterNotExistException",
        function(__os)
        {
            __os.writeString(this.id);
        },
        function(__is)
        {
            this.id = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if an object already exists.
     * 
     **/
    IceGrid.ObjectExistsException = Slice.defineUserException(
        function(id, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.id = id !== undefined ? id : new Ice.Identity();
        },
        Ice.UserException,
        "IceGrid::ObjectExistsException",
        function(__os)
        {
            Ice.Identity.write(__os, this.id);
        },
        function(__is)
        {
            this.id = Ice.Identity.read(__is, this.id);
        },
        false,
        false);

    /**
     * This exception is raised if an object is not registered.
     * 
     **/
    IceGrid.ObjectNotRegisteredException = Slice.defineUserException(
        function(id, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.id = id !== undefined ? id : new Ice.Identity();
        },
        Ice.UserException,
        "IceGrid::ObjectNotRegisteredException",
        function(__os)
        {
            Ice.Identity.write(__os, this.id);
        },
        function(__is)
        {
            this.id = Ice.Identity.read(__is, this.id);
        },
        false,
        false);

    /**
     * This exception is raised if a node does not exist.
     * 
     **/
    IceGrid.NodeNotExistException = Slice.defineUserException(
        function(name, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.name = name !== undefined ? name : "";
        },
        Ice.UserException,
        "IceGrid::NodeNotExistException",
        function(__os)
        {
            __os.writeString(this.name);
        },
        function(__is)
        {
            this.name = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if a registry does not exist.
     * 
     **/
    IceGrid.RegistryNotExistException = Slice.defineUserException(
        function(name, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.name = name !== undefined ? name : "";
        },
        Ice.UserException,
        "IceGrid::RegistryNotExistException",
        function(__os)
        {
            __os.writeString(this.name);
        },
        function(__is)
        {
            this.name = __is.readString();
        },
        false,
        false);

    /**
     * An exception for deployment errors.
     * 
     **/
    IceGrid.DeploymentException = Slice.defineUserException(
        function(reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "IceGrid::DeploymentException",
        function(__os)
        {
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.reason = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if a node could not be reached.
     * 
     **/
    IceGrid.NodeUnreachableException = Slice.defineUserException(
        function(name, reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.name = name !== undefined ? name : "";
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "IceGrid::NodeUnreachableException",
        function(__os)
        {
            __os.writeString(this.name);
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.name = __is.readString();
            this.reason = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if a server could not be reached.
     * 
     **/
    IceGrid.ServerUnreachableException = Slice.defineUserException(
        function(name, reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.name = name !== undefined ? name : "";
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "IceGrid::ServerUnreachableException",
        function(__os)
        {
            __os.writeString(this.name);
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.name = __is.readString();
            this.reason = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if a registry could not be reached.
     * 
     **/
    IceGrid.RegistryUnreachableException = Slice.defineUserException(
        function(name, reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.name = name !== undefined ? name : "";
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "IceGrid::RegistryUnreachableException",
        function(__os)
        {
            __os.writeString(this.name);
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.name = __is.readString();
            this.reason = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if an unknown signal was sent to
     * to a server.
     * 
     **/
    IceGrid.BadSignalException = Slice.defineUserException(
        function(reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "IceGrid::BadSignalException",
        function(__os)
        {
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.reason = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if a patch failed.
     * 
     **/
    IceGrid.PatchException = Slice.defineUserException(
        function(reasons, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reasons = reasons !== undefined ? reasons : null;
        },
        Ice.UserException,
        "IceGrid::PatchException",
        function(__os)
        {
            Ice.StringSeqHelper.write(__os, this.reasons);
        },
        function(__is)
        {
            this.reasons = Ice.StringSeqHelper.read(__is);
        },
        false,
        false);

    /**
     * This exception is raised if a registry lock wasn't
     * acquired or is already held by a session.
     * 
     **/
    IceGrid.AccessDeniedException = Slice.defineUserException(
        function(lockUserId, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.lockUserId = lockUserId !== undefined ? lockUserId : "";
        },
        Ice.UserException,
        "IceGrid::AccessDeniedException",
        function(__os)
        {
            __os.writeString(this.lockUserId);
        },
        function(__is)
        {
            this.lockUserId = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if the allocation of an object failed.
     * 
     **/
    IceGrid.AllocationException = Slice.defineUserException(
        function(reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "IceGrid::AllocationException",
        function(__os)
        {
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.reason = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if the request to allocate an object times
     * out.
     * 
     **/
    IceGrid.AllocationTimeoutException = Slice.defineUserException(
        function(reason, _cause)
        {
            IceGrid.AllocationException.call(this, reason, _cause);
        },
        IceGrid.AllocationException,
        "IceGrid::AllocationTimeoutException",
        undefined, undefined,
        false,
        false);

    /**
     * This exception is raised if a client is denied the ability to create
     * a session with IceGrid.
     * 
     **/
    IceGrid.PermissionDeniedException = Slice.defineUserException(
        function(reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "IceGrid::PermissionDeniedException",
        function(__os)
        {
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.reason = __is.readString();
        },
        false,
        false);

    /**
     * This exception is raised if an observer is already registered with
     * the registry.
     * 
     * @see AdminSession#setObservers
     * @see AdminSession#setObserversByIdentity
     * 
     **/
    IceGrid.ObserverAlreadyRegisteredException = Slice.defineUserException(
        function(id, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.id = id !== undefined ? id : new Ice.Identity();
        },
        Ice.UserException,
        "IceGrid::ObserverAlreadyRegisteredException",
        function(__os)
        {
            Ice.Identity.write(__os, this.id);
        },
        function(__is)
        {
            this.id = Ice.Identity.read(__is, this.id);
        },
        false,
        false);

    /**
     * This exception is raised if a file is not available.
     * 
     * @see AdminSession#openServerStdOut
     * @see AdminSession#openServerStdErr
     * @see AdminSession#openNodeStdOut
     * @see AdminSession#openNodeStdErr
     * @see AdminSession#openRegistryStdOut
     * @see AdminSession#openRegistryStdErr
     * 
     **/
    IceGrid.FileNotAvailableException = Slice.defineUserException(
        function(reason, _cause)
        {
            Ice.UserException.call(this, _cause);
            this.reason = reason !== undefined ? reason : "";
        },
        Ice.UserException,
        "IceGrid::FileNotAvailableException",
        function(__os)
        {
            __os.writeString(this.reason);
        },
        function(__is)
        {
            this.reason = __is.readString();
        },
        false,
        false);
/* slice2js browser-bundle-skip */
    exports.IceGrid = IceGrid;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
