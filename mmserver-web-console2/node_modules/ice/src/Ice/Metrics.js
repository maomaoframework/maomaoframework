// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    var __M = require("../Ice/ModuleRegistry").Ice.__M;
    var Ice = __M.require(module, 
    [
        "../Ice/Object",
        "../Ice/ObjectPrx",
        "../Ice/Operation",
        "../Ice/Struct",
        "../Ice/Exception",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers",
        "../Ice/BuiltinSequences"
    ]).Ice;
    
    var Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */

    var IceMX = __M.module("IceMX");
/* slice2js browser-bundle-skip-end */
    Slice.defineDictionary(IceMX, "StringIntDict", "StringIntDictHelper", "Ice.StringHelper", "Ice.IntHelper", false, undefined, undefined);

    /**
     * The base class for metrics. A metrics object represents a
     * collection of measurements associated to a given a system.
     * 
     **/
    IceMX.Metrics = Slice.defineObject(
        function(id, total, current, totalLifetime, failures)
        {
            Ice.Object.call(this);
            this.id = id !== undefined ? id : "";
            this.total = total !== undefined ? total : new Ice.Long(0, 0);
            this.current = current !== undefined ? current : 0;
            this.totalLifetime = totalLifetime !== undefined ? totalLifetime : new Ice.Long(0, 0);
            this.failures = failures !== undefined ? failures : 0;
        },
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::IceMX::Metrics"
        ],
        -1,
        function(__os)
        {
            __os.writeString(this.id);
            __os.writeLong(this.total);
            __os.writeInt(this.current);
            __os.writeLong(this.totalLifetime);
            __os.writeInt(this.failures);
        },
        function(__is)
        {
            this.id = __is.readString();
            this.total = __is.readLong();
            this.current = __is.readInt();
            this.totalLifetime = __is.readLong();
            this.failures = __is.readInt();
        },
        false);

    IceMX.MetricsPrx = Slice.defineProxy(Ice.ObjectPrx, IceMX.Metrics.ice_staticId, undefined);

    Slice.defineOperations(IceMX.Metrics, IceMX.MetricsPrx);

    /**
     * A structure to keep track of failures associated with a given
     * metrics.
     * 
     **/
    IceMX.MetricsFailures = Slice.defineStruct(
        function(id, failures)
        {
            this.id = id !== undefined ? id : "";
            this.failures = failures !== undefined ? failures : null;
        },
        false,
        function(__os)
        {
            __os.writeString(this.id);
            IceMX.StringIntDictHelper.write(__os, this.failures);
        },
        function(__is)
        {
            this.id = __is.readString();
            this.failures = IceMX.StringIntDictHelper.read(__is);
        },
        2, 
        false);
    Slice.defineSequence(IceMX, "MetricsFailuresSeqHelper", "IceMX.MetricsFailures", false);
    Slice.defineSequence(IceMX, "MetricsMapHelper", "Ice.ObjectHelper", false, "IceMX.Metrics");
    Slice.defineDictionary(IceMX, "MetricsView", "MetricsViewHelper", "Ice.StringHelper", "IceMX.MetricsMapHelper", false, undefined, undefined, Ice.ArrayUtil.equals);

    /**
     * Raised if a metrics view cannot be found.
     * 
     **/
    IceMX.UnknownMetricsView = Slice.defineUserException(
        function(_cause)
        {
            Ice.UserException.call(this, _cause);
        },
        Ice.UserException,
        "IceMX::UnknownMetricsView",
        undefined, undefined,
        false,
        false);

    /**
     * The metrics administrative facet interface. This interface allows
     * remote administrative clients to access metrics of an application
     * that enabled the Ice administrative facility and configured some
     * metrics views.
     * 
     **/
    IceMX.MetricsAdmin = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::IceMX::MetricsAdmin"
        ],
        -1, undefined, undefined, false);

    IceMX.MetricsAdminPrx = Slice.defineProxy(Ice.ObjectPrx, IceMX.MetricsAdmin.ice_staticId, undefined);

    Slice.defineOperations(IceMX.MetricsAdmin, IceMX.MetricsAdminPrx,
    {
        "getMetricsViewNames": [, , , , 2, ["Ice.StringSeqHelper"], , [["Ice.StringSeqHelper"]], , , ],
        "enableMetricsView": [, , , , 2, , [[7]], , 
        [
            IceMX.UnknownMetricsView
        ], , ],
        "disableMetricsView": [, , , , 2, , [[7]], , 
        [
            IceMX.UnknownMetricsView
        ], , ],
        "getMetricsView": [, , , , 2, ["IceMX.MetricsViewHelper"], [[7]], [[4]], 
        [
            IceMX.UnknownMetricsView
        ], , true],
        "getMapMetricsFailures": [, , , , 2, ["IceMX.MetricsFailuresSeqHelper"], [[7], [7]], , 
        [
            IceMX.UnknownMetricsView
        ], , ],
        "getMetricsFailures": [, , , , 2, [IceMX.MetricsFailures], [[7], [7], [7]], , 
        [
            IceMX.UnknownMetricsView
        ], , ]
    });

    /**
     * Provides information on the number of threads currently in use and
     * their activity.
     * 
     **/
    IceMX.ThreadMetrics = Slice.defineObject(
        function(id, total, current, totalLifetime, failures, inUseForIO, inUseForUser, inUseForOther)
        {
            IceMX.Metrics.call(this, id, total, current, totalLifetime, failures);
            this.inUseForIO = inUseForIO !== undefined ? inUseForIO : 0;
            this.inUseForUser = inUseForUser !== undefined ? inUseForUser : 0;
            this.inUseForOther = inUseForOther !== undefined ? inUseForOther : 0;
        },
        IceMX.Metrics, undefined, 2,
        [
            "::Ice::Object",
            "::IceMX::Metrics",
            "::IceMX::ThreadMetrics"
        ],
        -1,
        function(__os)
        {
            __os.writeInt(this.inUseForIO);
            __os.writeInt(this.inUseForUser);
            __os.writeInt(this.inUseForOther);
        },
        function(__is)
        {
            this.inUseForIO = __is.readInt();
            this.inUseForUser = __is.readInt();
            this.inUseForOther = __is.readInt();
        },
        false);

    IceMX.ThreadMetricsPrx = Slice.defineProxy(IceMX.MetricsPrx, IceMX.ThreadMetrics.ice_staticId, undefined);

    Slice.defineOperations(IceMX.ThreadMetrics, IceMX.ThreadMetricsPrx);

    /**
     * Provides information on servant dispatch.
     * 
     **/
    IceMX.DispatchMetrics = Slice.defineObject(
        function(id, total, current, totalLifetime, failures, userException, size, replySize)
        {
            IceMX.Metrics.call(this, id, total, current, totalLifetime, failures);
            this.userException = userException !== undefined ? userException : 0;
            this.size = size !== undefined ? size : new Ice.Long(0, 0);
            this.replySize = replySize !== undefined ? replySize : new Ice.Long(0, 0);
        },
        IceMX.Metrics, undefined, 1,
        [
            "::Ice::Object",
            "::IceMX::DispatchMetrics",
            "::IceMX::Metrics"
        ],
        -1,
        function(__os)
        {
            __os.writeInt(this.userException);
            __os.writeLong(this.size);
            __os.writeLong(this.replySize);
        },
        function(__is)
        {
            this.userException = __is.readInt();
            this.size = __is.readLong();
            this.replySize = __is.readLong();
        },
        false);

    IceMX.DispatchMetricsPrx = Slice.defineProxy(IceMX.MetricsPrx, IceMX.DispatchMetrics.ice_staticId, undefined);

    Slice.defineOperations(IceMX.DispatchMetrics, IceMX.DispatchMetricsPrx);

    /**
     * Provides information on child invocations. A child invocation is
     * either remote (sent over an Ice connection) or collocated. An
     * invocation can have multiple child invocation if it is
     * retried. Child invocation metrics are embedded within {@link
     * InvocationMetrics}.
     * 
     **/
    IceMX.ChildInvocationMetrics = Slice.defineObject(
        function(id, total, current, totalLifetime, failures, size, replySize)
        {
            IceMX.Metrics.call(this, id, total, current, totalLifetime, failures);
            this.size = size !== undefined ? size : new Ice.Long(0, 0);
            this.replySize = replySize !== undefined ? replySize : new Ice.Long(0, 0);
        },
        IceMX.Metrics, undefined, 1,
        [
            "::Ice::Object",
            "::IceMX::ChildInvocationMetrics",
            "::IceMX::Metrics"
        ],
        -1,
        function(__os)
        {
            __os.writeLong(this.size);
            __os.writeLong(this.replySize);
        },
        function(__is)
        {
            this.size = __is.readLong();
            this.replySize = __is.readLong();
        },
        false);

    IceMX.ChildInvocationMetricsPrx = Slice.defineProxy(IceMX.MetricsPrx, IceMX.ChildInvocationMetrics.ice_staticId, undefined);

    Slice.defineOperations(IceMX.ChildInvocationMetrics, IceMX.ChildInvocationMetricsPrx);

    /**
     * Provides information on invocations that are collocated. Collocated
     * metrics are embedded within {@link InvocationMetrics}.
     * 
     **/
    IceMX.CollocatedMetrics = Slice.defineObject(
        function(id, total, current, totalLifetime, failures, size, replySize)
        {
            IceMX.ChildInvocationMetrics.call(this, id, total, current, totalLifetime, failures, size, replySize);
        },
        IceMX.ChildInvocationMetrics, undefined, 2,
        [
            "::Ice::Object",
            "::IceMX::ChildInvocationMetrics",
            "::IceMX::CollocatedMetrics",
            "::IceMX::Metrics"
        ],
        -1, undefined, undefined, false);

    IceMX.CollocatedMetricsPrx = Slice.defineProxy(IceMX.ChildInvocationMetricsPrx, IceMX.CollocatedMetrics.ice_staticId, undefined);

    Slice.defineOperations(IceMX.CollocatedMetrics, IceMX.CollocatedMetricsPrx);

    /**
     * Provides information on invocations that are specifically sent over
     * Ice connections. Remote metrics are embedded within {@link
     * InvocationMetrics}.
     * 
     **/
    IceMX.RemoteMetrics = Slice.defineObject(
        function(id, total, current, totalLifetime, failures, size, replySize)
        {
            IceMX.ChildInvocationMetrics.call(this, id, total, current, totalLifetime, failures, size, replySize);
        },
        IceMX.ChildInvocationMetrics, undefined, 3,
        [
            "::Ice::Object",
            "::IceMX::ChildInvocationMetrics",
            "::IceMX::Metrics",
            "::IceMX::RemoteMetrics"
        ],
        -1, undefined, undefined, false);

    IceMX.RemoteMetricsPrx = Slice.defineProxy(IceMX.ChildInvocationMetricsPrx, IceMX.RemoteMetrics.ice_staticId, undefined);

    Slice.defineOperations(IceMX.RemoteMetrics, IceMX.RemoteMetricsPrx);

    /**
     * Provide measurements for proxy invocations. Proxy invocations can
     * either be sent over the wire or be collocated.
     * 
     **/
    IceMX.InvocationMetrics = Slice.defineObject(
        function(id, total, current, totalLifetime, failures, retry, userException, remotes, collocated)
        {
            IceMX.Metrics.call(this, id, total, current, totalLifetime, failures);
            this.retry = retry !== undefined ? retry : 0;
            this.userException = userException !== undefined ? userException : 0;
            this.remotes = remotes !== undefined ? remotes : null;
            this.collocated = collocated !== undefined ? collocated : null;
        },
        IceMX.Metrics, undefined, 1,
        [
            "::Ice::Object",
            "::IceMX::InvocationMetrics",
            "::IceMX::Metrics"
        ],
        -1,
        function(__os)
        {
            __os.writeInt(this.retry);
            __os.writeInt(this.userException);
            IceMX.MetricsMapHelper.write(__os, this.remotes);
            IceMX.MetricsMapHelper.write(__os, this.collocated);
        },
        function(__is)
        {
            this.retry = __is.readInt();
            this.userException = __is.readInt();
            this.remotes = IceMX.MetricsMapHelper.read(__is);
            this.collocated = IceMX.MetricsMapHelper.read(__is);
        },
        false);

    IceMX.InvocationMetricsPrx = Slice.defineProxy(IceMX.MetricsPrx, IceMX.InvocationMetrics.ice_staticId, undefined);

    Slice.defineOperations(IceMX.InvocationMetrics, IceMX.InvocationMetricsPrx);

    /**
     * Provides information on the data sent and received over Ice
     * connections.
     * 
     **/
    IceMX.ConnectionMetrics = Slice.defineObject(
        function(id, total, current, totalLifetime, failures, receivedBytes, sentBytes)
        {
            IceMX.Metrics.call(this, id, total, current, totalLifetime, failures);
            this.receivedBytes = receivedBytes !== undefined ? receivedBytes : new Ice.Long(0, 0);
            this.sentBytes = sentBytes !== undefined ? sentBytes : new Ice.Long(0, 0);
        },
        IceMX.Metrics, undefined, 1,
        [
            "::Ice::Object",
            "::IceMX::ConnectionMetrics",
            "::IceMX::Metrics"
        ],
        -1,
        function(__os)
        {
            __os.writeLong(this.receivedBytes);
            __os.writeLong(this.sentBytes);
        },
        function(__is)
        {
            this.receivedBytes = __is.readLong();
            this.sentBytes = __is.readLong();
        },
        false);

    IceMX.ConnectionMetricsPrx = Slice.defineProxy(IceMX.MetricsPrx, IceMX.ConnectionMetrics.ice_staticId, undefined);

    Slice.defineOperations(IceMX.ConnectionMetrics, IceMX.ConnectionMetricsPrx);
/* slice2js browser-bundle-skip */
    exports.IceMX = IceMX;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
