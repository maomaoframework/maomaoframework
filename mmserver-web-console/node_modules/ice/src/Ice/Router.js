// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Router.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* slice2js browser-bundle-skip */
(function(module, require, exports)
{
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
    var __M = require("../Ice/ModuleRegistry").Ice.__M;
    var Ice = __M.require(module, 
    [
        "../Ice/Object",
        "../Ice/ObjectPrx",
        "../Ice/Operation",
        "../Ice/Long",
        "../Ice/HashMap",
        "../Ice/HashUtil",
        "../Ice/ArrayUtil",
        "../Ice/StreamHelpers",
        "../Ice/BuiltinSequences"
    ]).Ice;
    
    var Slice = Ice.Slice;
/* slice2js browser-bundle-skip-end */

    /**
     * The Ice router interface. Routers can be set either globally with
     * {@link Communicator#setDefaultRouter}, or with <tt>ice_router</tt> on specific
     * proxies.
     * 
     **/
    Ice.Router = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::Ice::Router"
        ],
        -1, undefined, undefined, false);

    Ice.RouterPrx = Slice.defineProxy(Ice.ObjectPrx, Ice.Router.ice_staticId, undefined);

    Slice.defineOperations(Ice.Router, Ice.RouterPrx,
    {
        "getClientProxy": [, 2, 1, , , [9], , , , , ],
        "getServerProxy": [, 2, 1, , , [9], , , , , ],
        "addProxies": [, 2, 2, , , ["Ice.ObjectProxySeqHelper"], [["Ice.ObjectProxySeqHelper"]], , , , ]
    });

    /**
     * This inferface should be implemented by services implementing the
     * Ice::Router interface. It should be advertised through an Ice
     * object with the identity `Ice/RouterFinder'. This allows clients to
     * retrieve the router proxy with just the endpoint information of the
     * service.
     * 
     **/
    Ice.RouterFinder = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::Ice::RouterFinder"
        ],
        -1, undefined, undefined, false);

    Ice.RouterFinderPrx = Slice.defineProxy(Ice.ObjectPrx, Ice.RouterFinder.ice_staticId, undefined);

    Slice.defineOperations(Ice.RouterFinder, Ice.RouterFinderPrx,
    {
        "getRouter": [, , , , , ["Ice.RouterPrx"], , , , , ]
    });
/* slice2js browser-bundle-skip */
    exports.Ice = Ice;
/* slice2js browser-bundle-skip-end */
/* slice2js browser-bundle-skip */
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
/* slice2js browser-bundle-skip-end */
